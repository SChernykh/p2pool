// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sidechain_types.proto
// Protobuf C++ Version: 6.31.1

#ifndef sidechain_5ftypes_2eproto_2epb_2eh
#define sidechain_5ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sidechain_5ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sidechain_5ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_sidechain_5ftypes_2eproto;
}  // extern "C"
namespace tari {
namespace rpc {
enum QuorumDecision : int;
extern const uint32_t QuorumDecision_internal_data_[];
class BuildInfo;
struct BuildInfoDefaultTypeInternal;
extern BuildInfoDefaultTypeInternal _BuildInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull BuildInfo_class_data_;
class ChainLink;
struct ChainLinkDefaultTypeInternal;
extern ChainLinkDefaultTypeInternal _ChainLink_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ChainLink_class_data_;
class CommitProof;
struct CommitProofDefaultTypeInternal;
extern CommitProofDefaultTypeInternal _CommitProof_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CommitProof_class_data_;
class CommitProofElement;
struct CommitProofElementDefaultTypeInternal;
extern CommitProofElementDefaultTypeInternal _CommitProofElement_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CommitProofElement_class_data_;
class CommitProofV1;
struct CommitProofV1DefaultTypeInternal;
extern CommitProofV1DefaultTypeInternal _CommitProofV1_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CommitProofV1_class_data_;
class ConfidentialOutputData;
struct ConfidentialOutputDataDefaultTypeInternal;
extern ConfidentialOutputDataDefaultTypeInternal _ConfidentialOutputData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConfidentialOutputData_class_data_;
class DummyChain;
struct DummyChainDefaultTypeInternal;
extern DummyChainDefaultTypeInternal _DummyChain_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DummyChain_class_data_;
class EvictAtom;
struct EvictAtomDefaultTypeInternal;
extern EvictAtomDefaultTypeInternal _EvictAtom_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull EvictAtom_class_data_;
class EvictionProof;
struct EvictionProofDefaultTypeInternal;
extern EvictionProofDefaultTypeInternal _EvictionProof_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull EvictionProof_class_data_;
class FlowInfo;
struct FlowInfoDefaultTypeInternal;
extern FlowInfoDefaultTypeInternal _FlowInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull FlowInfo_class_data_;
class ManifestInfo;
struct ManifestInfoDefaultTypeInternal;
extern ManifestInfoDefaultTypeInternal _ManifestInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ManifestInfo_class_data_;
class QuorumCertificate;
struct QuorumCertificateDefaultTypeInternal;
extern QuorumCertificateDefaultTypeInternal _QuorumCertificate_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull QuorumCertificate_class_data_;
class ShardGroup;
struct ShardGroupDefaultTypeInternal;
extern ShardGroupDefaultTypeInternal _ShardGroup_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ShardGroup_class_data_;
class SideChainFeature;
struct SideChainFeatureDefaultTypeInternal;
extern SideChainFeatureDefaultTypeInternal _SideChainFeature_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SideChainFeature_class_data_;
class SideChainId;
struct SideChainIdDefaultTypeInternal;
extern SideChainIdDefaultTypeInternal _SideChainId_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SideChainId_class_data_;
class SidechainBlockCommitProof;
struct SidechainBlockCommitProofDefaultTypeInternal;
extern SidechainBlockCommitProofDefaultTypeInternal _SidechainBlockCommitProof_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SidechainBlockCommitProof_class_data_;
class SidechainBlockHeader;
struct SidechainBlockHeaderDefaultTypeInternal;
extern SidechainBlockHeaderDefaultTypeInternal _SidechainBlockHeader_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SidechainBlockHeader_class_data_;
class TemplateRegistration;
struct TemplateRegistrationDefaultTypeInternal;
extern TemplateRegistrationDefaultTypeInternal _TemplateRegistration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TemplateRegistration_class_data_;
class TemplateType;
struct TemplateTypeDefaultTypeInternal;
extern TemplateTypeDefaultTypeInternal _TemplateType_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TemplateType_class_data_;
class ValidatorNodeExit;
struct ValidatorNodeExitDefaultTypeInternal;
extern ValidatorNodeExitDefaultTypeInternal _ValidatorNodeExit_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ValidatorNodeExit_class_data_;
class ValidatorNodeRegistration;
struct ValidatorNodeRegistrationDefaultTypeInternal;
extern ValidatorNodeRegistrationDefaultTypeInternal _ValidatorNodeRegistration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ValidatorNodeRegistration_class_data_;
class ValidatorSignature;
struct ValidatorSignatureDefaultTypeInternal;
extern ValidatorSignatureDefaultTypeInternal _ValidatorSignature_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ValidatorSignature_class_data_;
class WasmInfo;
struct WasmInfoDefaultTypeInternal;
extern WasmInfoDefaultTypeInternal _WasmInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull WasmInfo_class_data_;
}  // namespace rpc
}  // namespace tari
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::tari::rpc::QuorumDecision_internal_data_>
    internal::EnumTraitsImpl::value<::tari::rpc::QuorumDecision>;
}  // namespace protobuf
}  // namespace google

namespace tari {
namespace rpc {
enum QuorumDecision : int {
  Accept = 0,
  Reject = 1,
  QuorumDecision_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  QuorumDecision_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t QuorumDecision_internal_data_[];
inline constexpr QuorumDecision QuorumDecision_MIN =
    static_cast<QuorumDecision>(0);
inline constexpr QuorumDecision QuorumDecision_MAX =
    static_cast<QuorumDecision>(1);
inline bool QuorumDecision_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int QuorumDecision_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL QuorumDecision_descriptor();
template <typename T>
const ::std::string& QuorumDecision_Name(T value) {
  static_assert(::std::is_same<T, QuorumDecision>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to QuorumDecision_Name().");
  return QuorumDecision_Name(static_cast<QuorumDecision>(value));
}
template <>
inline const ::std::string& QuorumDecision_Name(QuorumDecision value) {
  return ::google::protobuf::internal::NameOfDenseEnum<QuorumDecision_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool QuorumDecision_Parse(
    ::absl::string_view name, QuorumDecision* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuorumDecision>(QuorumDecision_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class WasmInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.WasmInfo) */ {
 public:
  inline WasmInfo() : WasmInfo(nullptr) {}
  ~WasmInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WasmInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WasmInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WasmInfo(::google::protobuf::internal::ConstantInitialized);

  inline WasmInfo(const WasmInfo& from) : WasmInfo(nullptr, from) {}
  inline WasmInfo(WasmInfo&& from) noexcept
      : WasmInfo(nullptr, ::std::move(from)) {}
  inline WasmInfo& operator=(const WasmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WasmInfo& operator=(WasmInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WasmInfo& default_instance() {
    return *reinterpret_cast<const WasmInfo*>(
        &_WasmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(WasmInfo& a, WasmInfo& b) { a.Swap(&b); }
  inline void Swap(WasmInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WasmInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WasmInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WasmInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WasmInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WasmInfo& from) { WasmInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WasmInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.WasmInfo"; }

 protected:
  explicit WasmInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  WasmInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const WasmInfo& from);
  WasmInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, WasmInfo&& from) noexcept
      : WasmInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAbiVersionFieldNumber = 1,
  };
  // uint32 abi_version = 1;
  void clear_abi_version() ;
  ::uint32_t abi_version() const;
  void set_abi_version(::uint32_t value);

  private:
  ::uint32_t _internal_abi_version() const;
  void _internal_set_abi_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.WasmInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const WasmInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t abi_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull WasmInfo_class_data_;
// -------------------------------------------------------------------

class ShardGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ShardGroup) */ {
 public:
  inline ShardGroup() : ShardGroup(nullptr) {}
  ~ShardGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShardGroup* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShardGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShardGroup(::google::protobuf::internal::ConstantInitialized);

  inline ShardGroup(const ShardGroup& from) : ShardGroup(nullptr, from) {}
  inline ShardGroup(ShardGroup&& from) noexcept
      : ShardGroup(nullptr, ::std::move(from)) {}
  inline ShardGroup& operator=(const ShardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardGroup& operator=(ShardGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShardGroup& default_instance() {
    return *reinterpret_cast<const ShardGroup*>(
        &_ShardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ShardGroup& a, ShardGroup& b) { a.Swap(&b); }
  inline void Swap(ShardGroup* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardGroup* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShardGroup* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ShardGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShardGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShardGroup& from) { ShardGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ShardGroup* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ShardGroup"; }

 protected:
  explicit ShardGroup(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ShardGroup(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ShardGroup& from);
  ShardGroup(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ShardGroup&& from) noexcept
      : ShardGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 1,
    kEndInclusiveFieldNumber = 2,
  };
  // uint32 start = 1;
  void clear_start() ;
  ::uint32_t start() const;
  void set_start(::uint32_t value);

  private:
  ::uint32_t _internal_start() const;
  void _internal_set_start(::uint32_t value);

  public:
  // uint32 end_inclusive = 2;
  void clear_end_inclusive() ;
  ::uint32_t end_inclusive() const;
  void set_end_inclusive(::uint32_t value);

  private:
  ::uint32_t _internal_end_inclusive() const;
  void _internal_set_end_inclusive(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ShardGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ShardGroup& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t start_;
    ::uint32_t end_inclusive_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ShardGroup_class_data_;
// -------------------------------------------------------------------

class ManifestInfo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tari.rpc.ManifestInfo) */ {
 public:
  inline ManifestInfo() : ManifestInfo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ManifestInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ManifestInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ManifestInfo(::google::protobuf::internal::ConstantInitialized);

  inline ManifestInfo(const ManifestInfo& from) : ManifestInfo(nullptr, from) {}
  inline ManifestInfo(ManifestInfo&& from) noexcept
      : ManifestInfo(nullptr, ::std::move(from)) {}
  inline ManifestInfo& operator=(const ManifestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManifestInfo& operator=(ManifestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManifestInfo& default_instance() {
    return *reinterpret_cast<const ManifestInfo*>(
        &_ManifestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ManifestInfo& a, ManifestInfo& b) { a.Swap(&b); }
  inline void Swap(ManifestInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManifestInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManifestInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ManifestInfo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ManifestInfo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ManifestInfo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ManifestInfo"; }

 protected:
  explicit ManifestInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ManifestInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ManifestInfo& from);
  ManifestInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ManifestInfo&& from) noexcept
      : ManifestInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tari.rpc.ManifestInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ManifestInfo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ManifestInfo_class_data_;
// -------------------------------------------------------------------

class FlowInfo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tari.rpc.FlowInfo) */ {
 public:
  inline FlowInfo() : FlowInfo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FlowInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FlowInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FlowInfo(::google::protobuf::internal::ConstantInitialized);

  inline FlowInfo(const FlowInfo& from) : FlowInfo(nullptr, from) {}
  inline FlowInfo(FlowInfo&& from) noexcept
      : FlowInfo(nullptr, ::std::move(from)) {}
  inline FlowInfo& operator=(const FlowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowInfo& operator=(FlowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowInfo& default_instance() {
    return *reinterpret_cast<const FlowInfo*>(
        &_FlowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(FlowInfo& a, FlowInfo& b) { a.Swap(&b); }
  inline void Swap(FlowInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<FlowInfo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FlowInfo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FlowInfo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.FlowInfo"; }

 protected:
  explicit FlowInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  FlowInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FlowInfo& from);
  FlowInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, FlowInfo&& from) noexcept
      : FlowInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tari.rpc.FlowInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const FlowInfo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull FlowInfo_class_data_;
// -------------------------------------------------------------------

class EvictAtom final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.EvictAtom) */ {
 public:
  inline EvictAtom() : EvictAtom(nullptr) {}
  ~EvictAtom() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EvictAtom* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EvictAtom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EvictAtom(::google::protobuf::internal::ConstantInitialized);

  inline EvictAtom(const EvictAtom& from) : EvictAtom(nullptr, from) {}
  inline EvictAtom(EvictAtom&& from) noexcept
      : EvictAtom(nullptr, ::std::move(from)) {}
  inline EvictAtom& operator=(const EvictAtom& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictAtom& operator=(EvictAtom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvictAtom& default_instance() {
    return *reinterpret_cast<const EvictAtom*>(
        &_EvictAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(EvictAtom& a, EvictAtom& b) { a.Swap(&b); }
  inline void Swap(EvictAtom* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictAtom* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvictAtom* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EvictAtom>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EvictAtom& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EvictAtom& from) { EvictAtom::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EvictAtom* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.EvictAtom"; }

 protected:
  explicit EvictAtom(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EvictAtom(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EvictAtom& from);
  EvictAtom(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EvictAtom&& from) noexcept
      : EvictAtom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // bytes public_key = 1;
  void clear_public_key() ;
  const ::std::string& public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_key();
  void set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.EvictAtom)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EvictAtom& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull EvictAtom_class_data_;
// -------------------------------------------------------------------

class ConfidentialOutputData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ConfidentialOutputData) */ {
 public:
  inline ConfidentialOutputData() : ConfidentialOutputData(nullptr) {}
  ~ConfidentialOutputData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfidentialOutputData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfidentialOutputData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfidentialOutputData(::google::protobuf::internal::ConstantInitialized);

  inline ConfidentialOutputData(const ConfidentialOutputData& from) : ConfidentialOutputData(nullptr, from) {}
  inline ConfidentialOutputData(ConfidentialOutputData&& from) noexcept
      : ConfidentialOutputData(nullptr, ::std::move(from)) {}
  inline ConfidentialOutputData& operator=(const ConfidentialOutputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfidentialOutputData& operator=(ConfidentialOutputData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfidentialOutputData& default_instance() {
    return *reinterpret_cast<const ConfidentialOutputData*>(
        &_ConfidentialOutputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ConfidentialOutputData& a, ConfidentialOutputData& b) { a.Swap(&b); }
  inline void Swap(ConfidentialOutputData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfidentialOutputData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfidentialOutputData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfidentialOutputData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfidentialOutputData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfidentialOutputData& from) { ConfidentialOutputData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfidentialOutputData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ConfidentialOutputData"; }

 protected:
  explicit ConfidentialOutputData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConfidentialOutputData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConfidentialOutputData& from);
  ConfidentialOutputData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConfidentialOutputData&& from) noexcept
      : ConfidentialOutputData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClaimPublicKeyFieldNumber = 1,
  };
  // bytes claim_public_key = 1;
  void clear_claim_public_key() ;
  const ::std::string& claim_public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_claim_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_claim_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_claim_public_key();
  void set_allocated_claim_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_claim_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_claim_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_claim_public_key();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ConfidentialOutputData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConfidentialOutputData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr claim_public_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConfidentialOutputData_class_data_;
// -------------------------------------------------------------------

class ChainLink final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ChainLink) */ {
 public:
  inline ChainLink() : ChainLink(nullptr) {}
  ~ChainLink() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChainLink* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChainLink));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChainLink(::google::protobuf::internal::ConstantInitialized);

  inline ChainLink(const ChainLink& from) : ChainLink(nullptr, from) {}
  inline ChainLink(ChainLink&& from) noexcept
      : ChainLink(nullptr, ::std::move(from)) {}
  inline ChainLink& operator=(const ChainLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainLink& operator=(ChainLink&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChainLink& default_instance() {
    return *reinterpret_cast<const ChainLink*>(
        &_ChainLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(ChainLink& a, ChainLink& b) { a.Swap(&b); }
  inline void Swap(ChainLink* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChainLink* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChainLink* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChainLink>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChainLink& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChainLink& from) { ChainLink::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChainLink* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ChainLink"; }

 protected:
  explicit ChainLink(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChainLink(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChainLink& from);
  ChainLink(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChainLink&& from) noexcept
      : ChainLink(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderHashFieldNumber = 1,
    kParentIdFieldNumber = 2,
  };
  // bytes header_hash = 1;
  void clear_header_hash() ;
  const ::std::string& header_hash() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_header_hash(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_header_hash();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_header_hash();
  void set_allocated_header_hash(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_header_hash() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_header_hash(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_header_hash();

  public:
  // bytes parent_id = 2;
  void clear_parent_id() ;
  const ::std::string& parent_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_parent_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_parent_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_parent_id();
  void set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_parent_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_parent_id();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ChainLink)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChainLink& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr header_hash_;
    ::google::protobuf::internal::ArenaStringPtr parent_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ChainLink_class_data_;
// -------------------------------------------------------------------

class BuildInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.BuildInfo) */ {
 public:
  inline BuildInfo() : BuildInfo(nullptr) {}
  ~BuildInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BuildInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BuildInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BuildInfo(::google::protobuf::internal::ConstantInitialized);

  inline BuildInfo(const BuildInfo& from) : BuildInfo(nullptr, from) {}
  inline BuildInfo(BuildInfo&& from) noexcept
      : BuildInfo(nullptr, ::std::move(from)) {}
  inline BuildInfo& operator=(const BuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildInfo& operator=(BuildInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildInfo& default_instance() {
    return *reinterpret_cast<const BuildInfo*>(
        &_BuildInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(BuildInfo& a, BuildInfo& b) { a.Swap(&b); }
  inline void Swap(BuildInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BuildInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BuildInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BuildInfo& from) { BuildInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BuildInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.BuildInfo"; }

 protected:
  explicit BuildInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  BuildInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const BuildInfo& from);
  BuildInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, BuildInfo&& from) noexcept
      : BuildInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRepoUrlFieldNumber = 1,
    kCommitHashFieldNumber = 2,
  };
  // string repo_url = 1;
  void clear_repo_url() ;
  const ::std::string& repo_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_repo_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_repo_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_repo_url();
  void set_allocated_repo_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_repo_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_repo_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_repo_url();

  public:
  // bytes commit_hash = 2;
  void clear_commit_hash() ;
  const ::std::string& commit_hash() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_commit_hash(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_commit_hash();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_commit_hash();
  void set_allocated_commit_hash(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_commit_hash() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_commit_hash(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_commit_hash();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.BuildInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 35,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const BuildInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr repo_url_;
    ::google::protobuf::internal::ArenaStringPtr commit_hash_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull BuildInfo_class_data_;
// -------------------------------------------------------------------

class ValidatorSignature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ValidatorSignature) */ {
 public:
  inline ValidatorSignature() : ValidatorSignature(nullptr) {}
  ~ValidatorSignature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorSignature* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorSignature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSignature(::google::protobuf::internal::ConstantInitialized);

  inline ValidatorSignature(const ValidatorSignature& from) : ValidatorSignature(nullptr, from) {}
  inline ValidatorSignature(ValidatorSignature&& from) noexcept
      : ValidatorSignature(nullptr, ::std::move(from)) {}
  inline ValidatorSignature& operator=(const ValidatorSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSignature& operator=(ValidatorSignature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSignature& default_instance() {
    return *reinterpret_cast<const ValidatorSignature*>(
        &_ValidatorSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(ValidatorSignature& a, ValidatorSignature& b) { a.Swap(&b); }
  inline void Swap(ValidatorSignature* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSignature* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSignature* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorSignature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorSignature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorSignature& from) { ValidatorSignature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorSignature* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ValidatorSignature"; }

 protected:
  explicit ValidatorSignature(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ValidatorSignature(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ValidatorSignature& from);
  ValidatorSignature(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ValidatorSignature&& from) noexcept
      : ValidatorSignature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes public_key = 1;
  void clear_public_key() ;
  const ::std::string& public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_key();
  void set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // .tari.rpc.Signature signature = 2;
  bool has_signature() const;
  void clear_signature() ;
  const ::tari::rpc::Signature& signature() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_signature();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::tari::rpc::Signature& _internal_signature() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ValidatorSignature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ValidatorSignature& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE signature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ValidatorSignature_class_data_;
// -------------------------------------------------------------------

class ValidatorNodeRegistration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ValidatorNodeRegistration) */ {
 public:
  inline ValidatorNodeRegistration() : ValidatorNodeRegistration(nullptr) {}
  ~ValidatorNodeRegistration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorNodeRegistration* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorNodeRegistration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorNodeRegistration(::google::protobuf::internal::ConstantInitialized);

  inline ValidatorNodeRegistration(const ValidatorNodeRegistration& from) : ValidatorNodeRegistration(nullptr, from) {}
  inline ValidatorNodeRegistration(ValidatorNodeRegistration&& from) noexcept
      : ValidatorNodeRegistration(nullptr, ::std::move(from)) {}
  inline ValidatorNodeRegistration& operator=(const ValidatorNodeRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorNodeRegistration& operator=(ValidatorNodeRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorNodeRegistration& default_instance() {
    return *reinterpret_cast<const ValidatorNodeRegistration*>(
        &_ValidatorNodeRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ValidatorNodeRegistration& a, ValidatorNodeRegistration& b) { a.Swap(&b); }
  inline void Swap(ValidatorNodeRegistration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorNodeRegistration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorNodeRegistration* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorNodeRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorNodeRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorNodeRegistration& from) { ValidatorNodeRegistration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorNodeRegistration* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ValidatorNodeRegistration"; }

 protected:
  explicit ValidatorNodeRegistration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ValidatorNodeRegistration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ValidatorNodeRegistration& from);
  ValidatorNodeRegistration(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ValidatorNodeRegistration&& from) noexcept
      : ValidatorNodeRegistration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kClaimPublicKeyFieldNumber = 3,
    kSignatureFieldNumber = 2,
    kMaxEpochFieldNumber = 4,
  };
  // bytes public_key = 1;
  void clear_public_key() ;
  const ::std::string& public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_key();
  void set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // bytes claim_public_key = 3;
  void clear_claim_public_key() ;
  const ::std::string& claim_public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_claim_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_claim_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_claim_public_key();
  void set_allocated_claim_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_claim_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_claim_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_claim_public_key();

  public:
  // .tari.rpc.Signature signature = 2;
  bool has_signature() const;
  void clear_signature() ;
  const ::tari::rpc::Signature& signature() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_signature();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::tari::rpc::Signature& _internal_signature() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // uint64 max_epoch = 4;
  void clear_max_epoch() ;
  ::uint64_t max_epoch() const;
  void set_max_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_max_epoch() const;
  void _internal_set_max_epoch(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ValidatorNodeRegistration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ValidatorNodeRegistration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::google::protobuf::internal::ArenaStringPtr claim_public_key_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE signature_;
    ::uint64_t max_epoch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ValidatorNodeRegistration_class_data_;
// -------------------------------------------------------------------

class ValidatorNodeExit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.ValidatorNodeExit) */ {
 public:
  inline ValidatorNodeExit() : ValidatorNodeExit(nullptr) {}
  ~ValidatorNodeExit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorNodeExit* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorNodeExit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorNodeExit(::google::protobuf::internal::ConstantInitialized);

  inline ValidatorNodeExit(const ValidatorNodeExit& from) : ValidatorNodeExit(nullptr, from) {}
  inline ValidatorNodeExit(ValidatorNodeExit&& from) noexcept
      : ValidatorNodeExit(nullptr, ::std::move(from)) {}
  inline ValidatorNodeExit& operator=(const ValidatorNodeExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorNodeExit& operator=(ValidatorNodeExit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorNodeExit& default_instance() {
    return *reinterpret_cast<const ValidatorNodeExit*>(
        &_ValidatorNodeExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ValidatorNodeExit& a, ValidatorNodeExit& b) { a.Swap(&b); }
  inline void Swap(ValidatorNodeExit* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorNodeExit* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorNodeExit* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorNodeExit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorNodeExit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorNodeExit& from) { ValidatorNodeExit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorNodeExit* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.ValidatorNodeExit"; }

 protected:
  explicit ValidatorNodeExit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ValidatorNodeExit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ValidatorNodeExit& from);
  ValidatorNodeExit(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ValidatorNodeExit&& from) noexcept
      : ValidatorNodeExit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kMaxEpochFieldNumber = 3,
  };
  // bytes public_key = 1;
  void clear_public_key() ;
  const ::std::string& public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_key();
  void set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // .tari.rpc.Signature signature = 2;
  bool has_signature() const;
  void clear_signature() ;
  const ::tari::rpc::Signature& signature() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_signature();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::tari::rpc::Signature& _internal_signature() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // uint64 max_epoch = 3;
  void clear_max_epoch() ;
  ::uint64_t max_epoch() const;
  void set_max_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_max_epoch() const;
  void _internal_set_max_epoch(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.ValidatorNodeExit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ValidatorNodeExit& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE signature_;
    ::uint64_t max_epoch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ValidatorNodeExit_class_data_;
// -------------------------------------------------------------------

class TemplateType final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.TemplateType) */ {
 public:
  inline TemplateType() : TemplateType(nullptr) {}
  ~TemplateType() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemplateType* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemplateType));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemplateType(::google::protobuf::internal::ConstantInitialized);

  inline TemplateType(const TemplateType& from) : TemplateType(nullptr, from) {}
  inline TemplateType(TemplateType&& from) noexcept
      : TemplateType(nullptr, ::std::move(from)) {}
  inline TemplateType& operator=(const TemplateType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemplateType& operator=(TemplateType&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemplateType& default_instance() {
    return *reinterpret_cast<const TemplateType*>(
        &_TemplateType_default_instance_);
  }
  enum TemplateTypeCase {
    kWasm = 1,
    kFlow = 2,
    kManifest = 3,
    TEMPLATE_TYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TemplateType& a, TemplateType& b) { a.Swap(&b); }
  inline void Swap(TemplateType* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemplateType* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemplateType* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemplateType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemplateType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemplateType& from) { TemplateType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemplateType* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.TemplateType"; }

 protected:
  explicit TemplateType(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TemplateType(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TemplateType& from);
  TemplateType(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TemplateType&& from) noexcept
      : TemplateType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWasmFieldNumber = 1,
    kFlowFieldNumber = 2,
    kManifestFieldNumber = 3,
  };
  // .tari.rpc.WasmInfo wasm = 1;
  bool has_wasm() const;
  private:
  bool _internal_has_wasm() const;

  public:
  void clear_wasm() ;
  const ::tari::rpc::WasmInfo& wasm() const;
  [[nodiscard]] ::tari::rpc::WasmInfo* PROTOBUF_NULLABLE release_wasm();
  ::tari::rpc::WasmInfo* PROTOBUF_NONNULL mutable_wasm();
  void set_allocated_wasm(::tari::rpc::WasmInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_wasm(::tari::rpc::WasmInfo* PROTOBUF_NULLABLE value);
  ::tari::rpc::WasmInfo* PROTOBUF_NULLABLE unsafe_arena_release_wasm();

  private:
  const ::tari::rpc::WasmInfo& _internal_wasm() const;
  ::tari::rpc::WasmInfo* PROTOBUF_NONNULL _internal_mutable_wasm();

  public:
  // .tari.rpc.FlowInfo flow = 2;
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;

  public:
  void clear_flow() ;
  const ::tari::rpc::FlowInfo& flow() const;
  [[nodiscard]] ::tari::rpc::FlowInfo* PROTOBUF_NULLABLE release_flow();
  ::tari::rpc::FlowInfo* PROTOBUF_NONNULL mutable_flow();
  void set_allocated_flow(::tari::rpc::FlowInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_flow(::tari::rpc::FlowInfo* PROTOBUF_NULLABLE value);
  ::tari::rpc::FlowInfo* PROTOBUF_NULLABLE unsafe_arena_release_flow();

  private:
  const ::tari::rpc::FlowInfo& _internal_flow() const;
  ::tari::rpc::FlowInfo* PROTOBUF_NONNULL _internal_mutable_flow();

  public:
  // .tari.rpc.ManifestInfo manifest = 3;
  bool has_manifest() const;
  private:
  bool _internal_has_manifest() const;

  public:
  void clear_manifest() ;
  const ::tari::rpc::ManifestInfo& manifest() const;
  [[nodiscard]] ::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE release_manifest();
  ::tari::rpc::ManifestInfo* PROTOBUF_NONNULL mutable_manifest();
  void set_allocated_manifest(::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_manifest(::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE value);
  ::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE unsafe_arena_release_manifest();

  private:
  const ::tari::rpc::ManifestInfo& _internal_manifest() const;
  ::tari::rpc::ManifestInfo* PROTOBUF_NONNULL _internal_mutable_manifest();

  public:
  void clear_template_type();
  TemplateTypeCase template_type_case() const;
  // @@protoc_insertion_point(class_scope:tari.rpc.TemplateType)
 private:
  class _Internal;
  void set_has_wasm();
  void set_has_flow();
  void set_has_manifest();
  inline bool has_template_type() const;
  inline void clear_has_template_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TemplateType& from_msg);
    union TemplateTypeUnion {
      constexpr TemplateTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE wasm_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE flow_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE manifest_;
    } template_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TemplateType_class_data_;
// -------------------------------------------------------------------

class SidechainBlockHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.SidechainBlockHeader) */ {
 public:
  inline SidechainBlockHeader() : SidechainBlockHeader(nullptr) {}
  ~SidechainBlockHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SidechainBlockHeader* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SidechainBlockHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SidechainBlockHeader(::google::protobuf::internal::ConstantInitialized);

  inline SidechainBlockHeader(const SidechainBlockHeader& from) : SidechainBlockHeader(nullptr, from) {}
  inline SidechainBlockHeader(SidechainBlockHeader&& from) noexcept
      : SidechainBlockHeader(nullptr, ::std::move(from)) {}
  inline SidechainBlockHeader& operator=(const SidechainBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidechainBlockHeader& operator=(SidechainBlockHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SidechainBlockHeader& default_instance() {
    return *reinterpret_cast<const SidechainBlockHeader*>(
        &_SidechainBlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SidechainBlockHeader& a, SidechainBlockHeader& b) { a.Swap(&b); }
  inline void Swap(SidechainBlockHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SidechainBlockHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SidechainBlockHeader* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SidechainBlockHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SidechainBlockHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SidechainBlockHeader& from) { SidechainBlockHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SidechainBlockHeader* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.SidechainBlockHeader"; }

 protected:
  explicit SidechainBlockHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SidechainBlockHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SidechainBlockHeader& from);
  SidechainBlockHeader(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SidechainBlockHeader&& from) noexcept
      : SidechainBlockHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParentIdFieldNumber = 2,
    kJustifyIdFieldNumber = 3,
    kProposedByFieldNumber = 7,
    kStateMerkleRootFieldNumber = 8,
    kCommandMerkleRootFieldNumber = 9,
    kMetadataHashFieldNumber = 10,
    kShardGroupFieldNumber = 6,
    kSignatureFieldNumber = 11,
    kHeightFieldNumber = 4,
    kEpochFieldNumber = 5,
    kNetworkFieldNumber = 1,
  };
  // bytes parent_id = 2;
  void clear_parent_id() ;
  const ::std::string& parent_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_parent_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_parent_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_parent_id();
  void set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_parent_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_parent_id();

  public:
  // bytes justify_id = 3;
  void clear_justify_id() ;
  const ::std::string& justify_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_justify_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_justify_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_justify_id();
  void set_allocated_justify_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_justify_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_justify_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_justify_id();

  public:
  // bytes proposed_by = 7;
  void clear_proposed_by() ;
  const ::std::string& proposed_by() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_proposed_by(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_proposed_by();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_proposed_by();
  void set_allocated_proposed_by(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_proposed_by() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_proposed_by(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_proposed_by();

  public:
  // bytes state_merkle_root = 8;
  void clear_state_merkle_root() ;
  const ::std::string& state_merkle_root() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_state_merkle_root(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_state_merkle_root();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_state_merkle_root();
  void set_allocated_state_merkle_root(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_state_merkle_root() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_state_merkle_root(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_state_merkle_root();

  public:
  // bytes command_merkle_root = 9;
  void clear_command_merkle_root() ;
  const ::std::string& command_merkle_root() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_command_merkle_root(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_command_merkle_root();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_command_merkle_root();
  void set_allocated_command_merkle_root(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_command_merkle_root() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_command_merkle_root(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_command_merkle_root();

  public:
  // bytes metadata_hash = 10;
  void clear_metadata_hash() ;
  const ::std::string& metadata_hash() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_metadata_hash(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_metadata_hash();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_metadata_hash();
  void set_allocated_metadata_hash(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_metadata_hash() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_metadata_hash(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_metadata_hash();

  public:
  // .tari.rpc.ShardGroup shard_group = 6;
  bool has_shard_group() const;
  void clear_shard_group() ;
  const ::tari::rpc::ShardGroup& shard_group() const;
  [[nodiscard]] ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE release_shard_group();
  ::tari::rpc::ShardGroup* PROTOBUF_NONNULL mutable_shard_group();
  void set_allocated_shard_group(::tari::rpc::ShardGroup* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shard_group(::tari::rpc::ShardGroup* PROTOBUF_NULLABLE value);
  ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE unsafe_arena_release_shard_group();

  private:
  const ::tari::rpc::ShardGroup& _internal_shard_group() const;
  ::tari::rpc::ShardGroup* PROTOBUF_NONNULL _internal_mutable_shard_group();

  public:
  // .tari.rpc.Signature signature = 11;
  bool has_signature() const;
  void clear_signature() ;
  const ::tari::rpc::Signature& signature() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_signature();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::tari::rpc::Signature& _internal_signature() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // uint64 height = 4;
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // uint64 epoch = 5;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // uint32 network = 1;
  void clear_network() ;
  ::uint32_t network() const;
  void set_network(::uint32_t value);

  private:
  ::uint32_t _internal_network() const;
  void _internal_set_network(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.SidechainBlockHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SidechainBlockHeader& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr parent_id_;
    ::google::protobuf::internal::ArenaStringPtr justify_id_;
    ::google::protobuf::internal::ArenaStringPtr proposed_by_;
    ::google::protobuf::internal::ArenaStringPtr state_merkle_root_;
    ::google::protobuf::internal::ArenaStringPtr command_merkle_root_;
    ::google::protobuf::internal::ArenaStringPtr metadata_hash_;
    ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE shard_group_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE signature_;
    ::uint64_t height_;
    ::uint64_t epoch_;
    ::uint32_t network_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SidechainBlockHeader_class_data_;
// -------------------------------------------------------------------

class SideChainId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.SideChainId) */ {
 public:
  inline SideChainId() : SideChainId(nullptr) {}
  ~SideChainId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SideChainId* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SideChainId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SideChainId(::google::protobuf::internal::ConstantInitialized);

  inline SideChainId(const SideChainId& from) : SideChainId(nullptr, from) {}
  inline SideChainId(SideChainId&& from) noexcept
      : SideChainId(nullptr, ::std::move(from)) {}
  inline SideChainId& operator=(const SideChainId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideChainId& operator=(SideChainId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideChainId& default_instance() {
    return *reinterpret_cast<const SideChainId*>(
        &_SideChainId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SideChainId& a, SideChainId& b) { a.Swap(&b); }
  inline void Swap(SideChainId* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideChainId* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideChainId* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SideChainId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SideChainId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SideChainId& from) { SideChainId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SideChainId* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.SideChainId"; }

 protected:
  explicit SideChainId(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SideChainId(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SideChainId& from);
  SideChainId(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SideChainId&& from) noexcept
      : SideChainId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kKnowledgeProofFieldNumber = 2,
  };
  // bytes public_key = 1;
  void clear_public_key() ;
  const ::std::string& public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_public_key();
  void set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // .tari.rpc.Signature knowledge_proof = 2;
  bool has_knowledge_proof() const;
  void clear_knowledge_proof() ;
  const ::tari::rpc::Signature& knowledge_proof() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_knowledge_proof();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_knowledge_proof();
  void set_allocated_knowledge_proof(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_knowledge_proof(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_knowledge_proof();

  private:
  const ::tari::rpc::Signature& _internal_knowledge_proof() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_knowledge_proof();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.SideChainId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SideChainId& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr public_key_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE knowledge_proof_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SideChainId_class_data_;
// -------------------------------------------------------------------

class DummyChain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.DummyChain) */ {
 public:
  inline DummyChain() : DummyChain(nullptr) {}
  ~DummyChain() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DummyChain* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DummyChain));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DummyChain(::google::protobuf::internal::ConstantInitialized);

  inline DummyChain(const DummyChain& from) : DummyChain(nullptr, from) {}
  inline DummyChain(DummyChain&& from) noexcept
      : DummyChain(nullptr, ::std::move(from)) {}
  inline DummyChain& operator=(const DummyChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyChain& operator=(DummyChain&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyChain& default_instance() {
    return *reinterpret_cast<const DummyChain*>(
        &_DummyChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(DummyChain& a, DummyChain& b) { a.Swap(&b); }
  inline void Swap(DummyChain* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyChain* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyChain* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DummyChain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DummyChain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DummyChain& from) { DummyChain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DummyChain* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.DummyChain"; }

 protected:
  explicit DummyChain(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DummyChain(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DummyChain& from);
  DummyChain(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DummyChain&& from) noexcept
      : DummyChain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChainLinksFieldNumber = 1,
  };
  // repeated .tari.rpc.ChainLink chain_links = 1;
  int chain_links_size() const;
  private:
  int _internal_chain_links_size() const;

  public:
  void clear_chain_links() ;
  ::tari::rpc::ChainLink* PROTOBUF_NONNULL mutable_chain_links(int index);
  ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>* PROTOBUF_NONNULL mutable_chain_links();

  private:
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>& _internal_chain_links() const;
  ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>* PROTOBUF_NONNULL _internal_mutable_chain_links();
  public:
  const ::tari::rpc::ChainLink& chain_links(int index) const;
  ::tari::rpc::ChainLink* PROTOBUF_NONNULL add_chain_links();
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>& chain_links() const;
  // @@protoc_insertion_point(class_scope:tari.rpc.DummyChain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DummyChain& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tari::rpc::ChainLink > chain_links_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DummyChain_class_data_;
// -------------------------------------------------------------------

class TemplateRegistration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.TemplateRegistration) */ {
 public:
  inline TemplateRegistration() : TemplateRegistration(nullptr) {}
  ~TemplateRegistration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TemplateRegistration* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TemplateRegistration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TemplateRegistration(::google::protobuf::internal::ConstantInitialized);

  inline TemplateRegistration(const TemplateRegistration& from) : TemplateRegistration(nullptr, from) {}
  inline TemplateRegistration(TemplateRegistration&& from) noexcept
      : TemplateRegistration(nullptr, ::std::move(from)) {}
  inline TemplateRegistration& operator=(const TemplateRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemplateRegistration& operator=(TemplateRegistration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemplateRegistration& default_instance() {
    return *reinterpret_cast<const TemplateRegistration*>(
        &_TemplateRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TemplateRegistration& a, TemplateRegistration& b) { a.Swap(&b); }
  inline void Swap(TemplateRegistration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemplateRegistration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemplateRegistration* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TemplateRegistration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TemplateRegistration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TemplateRegistration& from) { TemplateRegistration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TemplateRegistration* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.TemplateRegistration"; }

 protected:
  explicit TemplateRegistration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TemplateRegistration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TemplateRegistration& from);
  TemplateRegistration(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TemplateRegistration&& from) noexcept
      : TemplateRegistration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuthorPublicKeyFieldNumber = 1,
    kTemplateNameFieldNumber = 3,
    kBinaryShaFieldNumber = 7,
    kBinaryUrlFieldNumber = 8,
    kAuthorSignatureFieldNumber = 2,
    kTemplateTypeFieldNumber = 5,
    kBuildInfoFieldNumber = 6,
    kTemplateVersionFieldNumber = 4,
  };
  // bytes author_public_key = 1;
  void clear_author_public_key() ;
  const ::std::string& author_public_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_author_public_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_author_public_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_author_public_key();
  void set_allocated_author_public_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_author_public_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_author_public_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_author_public_key();

  public:
  // string template_name = 3;
  void clear_template_name() ;
  const ::std::string& template_name() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_template_name(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_template_name();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_template_name();
  void set_allocated_template_name(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_template_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_template_name(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_template_name();

  public:
  // bytes binary_sha = 7;
  void clear_binary_sha() ;
  const ::std::string& binary_sha() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_binary_sha(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_binary_sha();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_binary_sha();
  void set_allocated_binary_sha(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_binary_sha() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_binary_sha(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_binary_sha();

  public:
  // string binary_url = 8;
  void clear_binary_url() ;
  const ::std::string& binary_url() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_binary_url(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_binary_url();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_binary_url();
  void set_allocated_binary_url(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_binary_url() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_binary_url(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_binary_url();

  public:
  // .tari.rpc.Signature author_signature = 2;
  bool has_author_signature() const;
  void clear_author_signature() ;
  const ::tari::rpc::Signature& author_signature() const;
  [[nodiscard]] ::tari::rpc::Signature* PROTOBUF_NULLABLE release_author_signature();
  ::tari::rpc::Signature* PROTOBUF_NONNULL mutable_author_signature();
  void set_allocated_author_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_author_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value);
  ::tari::rpc::Signature* PROTOBUF_NULLABLE unsafe_arena_release_author_signature();

  private:
  const ::tari::rpc::Signature& _internal_author_signature() const;
  ::tari::rpc::Signature* PROTOBUF_NONNULL _internal_mutable_author_signature();

  public:
  // .tari.rpc.TemplateType template_type = 5;
  bool has_template_type() const;
  void clear_template_type() ;
  const ::tari::rpc::TemplateType& template_type() const;
  [[nodiscard]] ::tari::rpc::TemplateType* PROTOBUF_NULLABLE release_template_type();
  ::tari::rpc::TemplateType* PROTOBUF_NONNULL mutable_template_type();
  void set_allocated_template_type(::tari::rpc::TemplateType* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_template_type(::tari::rpc::TemplateType* PROTOBUF_NULLABLE value);
  ::tari::rpc::TemplateType* PROTOBUF_NULLABLE unsafe_arena_release_template_type();

  private:
  const ::tari::rpc::TemplateType& _internal_template_type() const;
  ::tari::rpc::TemplateType* PROTOBUF_NONNULL _internal_mutable_template_type();

  public:
  // .tari.rpc.BuildInfo build_info = 6;
  bool has_build_info() const;
  void clear_build_info() ;
  const ::tari::rpc::BuildInfo& build_info() const;
  [[nodiscard]] ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE release_build_info();
  ::tari::rpc::BuildInfo* PROTOBUF_NONNULL mutable_build_info();
  void set_allocated_build_info(::tari::rpc::BuildInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_build_info(::tari::rpc::BuildInfo* PROTOBUF_NULLABLE value);
  ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE unsafe_arena_release_build_info();

  private:
  const ::tari::rpc::BuildInfo& _internal_build_info() const;
  ::tari::rpc::BuildInfo* PROTOBUF_NONNULL _internal_mutable_build_info();

  public:
  // uint32 template_version = 4;
  void clear_template_version() ;
  ::uint32_t template_version() const;
  void set_template_version(::uint32_t value);

  private:
  ::uint32_t _internal_template_version() const;
  void _internal_set_template_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.TemplateRegistration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   3, 69,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TemplateRegistration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr author_public_key_;
    ::google::protobuf::internal::ArenaStringPtr template_name_;
    ::google::protobuf::internal::ArenaStringPtr binary_sha_;
    ::google::protobuf::internal::ArenaStringPtr binary_url_;
    ::tari::rpc::Signature* PROTOBUF_NULLABLE author_signature_;
    ::tari::rpc::TemplateType* PROTOBUF_NULLABLE template_type_;
    ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE build_info_;
    ::uint32_t template_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TemplateRegistration_class_data_;
// -------------------------------------------------------------------

class QuorumCertificate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.QuorumCertificate) */ {
 public:
  inline QuorumCertificate() : QuorumCertificate(nullptr) {}
  ~QuorumCertificate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuorumCertificate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuorumCertificate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuorumCertificate(::google::protobuf::internal::ConstantInitialized);

  inline QuorumCertificate(const QuorumCertificate& from) : QuorumCertificate(nullptr, from) {}
  inline QuorumCertificate(QuorumCertificate&& from) noexcept
      : QuorumCertificate(nullptr, ::std::move(from)) {}
  inline QuorumCertificate& operator=(const QuorumCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuorumCertificate& operator=(QuorumCertificate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuorumCertificate& default_instance() {
    return *reinterpret_cast<const QuorumCertificate*>(
        &_QuorumCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(QuorumCertificate& a, QuorumCertificate& b) { a.Swap(&b); }
  inline void Swap(QuorumCertificate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuorumCertificate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuorumCertificate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QuorumCertificate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuorumCertificate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuorumCertificate& from) { QuorumCertificate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QuorumCertificate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.QuorumCertificate"; }

 protected:
  explicit QuorumCertificate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  QuorumCertificate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const QuorumCertificate& from);
  QuorumCertificate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, QuorumCertificate&& from) noexcept
      : QuorumCertificate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 3,
    kHeaderHashFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kDecisionFieldNumber = 4,
  };
  // repeated .tari.rpc.ValidatorSignature signatures = 3;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::tari::rpc::ValidatorSignature* PROTOBUF_NONNULL mutable_signatures(int index);
  ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>* PROTOBUF_NONNULL mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>* PROTOBUF_NONNULL _internal_mutable_signatures();
  public:
  const ::tari::rpc::ValidatorSignature& signatures(int index) const;
  ::tari::rpc::ValidatorSignature* PROTOBUF_NONNULL add_signatures();
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>& signatures() const;
  // bytes header_hash = 1;
  void clear_header_hash() ;
  const ::std::string& header_hash() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_header_hash(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_header_hash();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_header_hash();
  void set_allocated_header_hash(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_header_hash() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_header_hash(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_header_hash();

  public:
  // bytes parent_id = 2;
  void clear_parent_id() ;
  const ::std::string& parent_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_parent_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_parent_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_parent_id();
  void set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_parent_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_parent_id();

  public:
  // .tari.rpc.QuorumDecision decision = 4;
  void clear_decision() ;
  ::tari::rpc::QuorumDecision decision() const;
  void set_decision(::tari::rpc::QuorumDecision value);

  private:
  ::tari::rpc::QuorumDecision _internal_decision() const;
  void _internal_set_decision(::tari::rpc::QuorumDecision value);

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.QuorumCertificate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const QuorumCertificate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tari::rpc::ValidatorSignature > signatures_;
    ::google::protobuf::internal::ArenaStringPtr header_hash_;
    ::google::protobuf::internal::ArenaStringPtr parent_id_;
    int decision_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull QuorumCertificate_class_data_;
// -------------------------------------------------------------------

class CommitProofElement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.CommitProofElement) */ {
 public:
  inline CommitProofElement() : CommitProofElement(nullptr) {}
  ~CommitProofElement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitProofElement* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitProofElement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitProofElement(::google::protobuf::internal::ConstantInitialized);

  inline CommitProofElement(const CommitProofElement& from) : CommitProofElement(nullptr, from) {}
  inline CommitProofElement(CommitProofElement&& from) noexcept
      : CommitProofElement(nullptr, ::std::move(from)) {}
  inline CommitProofElement& operator=(const CommitProofElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitProofElement& operator=(CommitProofElement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitProofElement& default_instance() {
    return *reinterpret_cast<const CommitProofElement*>(
        &_CommitProofElement_default_instance_);
  }
  enum ProofElementCase {
    kQuorumCertificate = 1,
    kDummyChain = 2,
    PROOF_ELEMENT_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(CommitProofElement& a, CommitProofElement& b) { a.Swap(&b); }
  inline void Swap(CommitProofElement* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitProofElement* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitProofElement* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitProofElement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitProofElement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitProofElement& from) { CommitProofElement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitProofElement* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.CommitProofElement"; }

 protected:
  explicit CommitProofElement(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CommitProofElement(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CommitProofElement& from);
  CommitProofElement(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CommitProofElement&& from) noexcept
      : CommitProofElement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQuorumCertificateFieldNumber = 1,
    kDummyChainFieldNumber = 2,
  };
  // .tari.rpc.QuorumCertificate quorum_certificate = 1;
  bool has_quorum_certificate() const;
  private:
  bool _internal_has_quorum_certificate() const;

  public:
  void clear_quorum_certificate() ;
  const ::tari::rpc::QuorumCertificate& quorum_certificate() const;
  [[nodiscard]] ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE release_quorum_certificate();
  ::tari::rpc::QuorumCertificate* PROTOBUF_NONNULL mutable_quorum_certificate();
  void set_allocated_quorum_certificate(::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_quorum_certificate(::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE value);
  ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE unsafe_arena_release_quorum_certificate();

  private:
  const ::tari::rpc::QuorumCertificate& _internal_quorum_certificate() const;
  ::tari::rpc::QuorumCertificate* PROTOBUF_NONNULL _internal_mutable_quorum_certificate();

  public:
  // .tari.rpc.DummyChain dummy_chain = 2;
  bool has_dummy_chain() const;
  private:
  bool _internal_has_dummy_chain() const;

  public:
  void clear_dummy_chain() ;
  const ::tari::rpc::DummyChain& dummy_chain() const;
  [[nodiscard]] ::tari::rpc::DummyChain* PROTOBUF_NULLABLE release_dummy_chain();
  ::tari::rpc::DummyChain* PROTOBUF_NONNULL mutable_dummy_chain();
  void set_allocated_dummy_chain(::tari::rpc::DummyChain* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_dummy_chain(::tari::rpc::DummyChain* PROTOBUF_NULLABLE value);
  ::tari::rpc::DummyChain* PROTOBUF_NULLABLE unsafe_arena_release_dummy_chain();

  private:
  const ::tari::rpc::DummyChain& _internal_dummy_chain() const;
  ::tari::rpc::DummyChain* PROTOBUF_NONNULL _internal_mutable_dummy_chain();

  public:
  void clear_proof_element();
  ProofElementCase proof_element_case() const;
  // @@protoc_insertion_point(class_scope:tari.rpc.CommitProofElement)
 private:
  class _Internal;
  void set_has_quorum_certificate();
  void set_has_dummy_chain();
  inline bool has_proof_element() const;
  inline void clear_has_proof_element();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CommitProofElement& from_msg);
    union ProofElementUnion {
      constexpr ProofElementUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE quorum_certificate_;
      ::tari::rpc::DummyChain* PROTOBUF_NULLABLE dummy_chain_;
    } proof_element_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CommitProofElement_class_data_;
// -------------------------------------------------------------------

class SidechainBlockCommitProof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.SidechainBlockCommitProof) */ {
 public:
  inline SidechainBlockCommitProof() : SidechainBlockCommitProof(nullptr) {}
  ~SidechainBlockCommitProof() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SidechainBlockCommitProof* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SidechainBlockCommitProof));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SidechainBlockCommitProof(::google::protobuf::internal::ConstantInitialized);

  inline SidechainBlockCommitProof(const SidechainBlockCommitProof& from) : SidechainBlockCommitProof(nullptr, from) {}
  inline SidechainBlockCommitProof(SidechainBlockCommitProof&& from) noexcept
      : SidechainBlockCommitProof(nullptr, ::std::move(from)) {}
  inline SidechainBlockCommitProof& operator=(const SidechainBlockCommitProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidechainBlockCommitProof& operator=(SidechainBlockCommitProof&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SidechainBlockCommitProof& default_instance() {
    return *reinterpret_cast<const SidechainBlockCommitProof*>(
        &_SidechainBlockCommitProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SidechainBlockCommitProof& a, SidechainBlockCommitProof& b) { a.Swap(&b); }
  inline void Swap(SidechainBlockCommitProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SidechainBlockCommitProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SidechainBlockCommitProof* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SidechainBlockCommitProof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SidechainBlockCommitProof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SidechainBlockCommitProof& from) { SidechainBlockCommitProof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SidechainBlockCommitProof* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.SidechainBlockCommitProof"; }

 protected:
  explicit SidechainBlockCommitProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SidechainBlockCommitProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SidechainBlockCommitProof& from);
  SidechainBlockCommitProof(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SidechainBlockCommitProof&& from) noexcept
      : SidechainBlockCommitProof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProofElementsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .tari.rpc.CommitProofElement proof_elements = 2;
  int proof_elements_size() const;
  private:
  int _internal_proof_elements_size() const;

  public:
  void clear_proof_elements() ;
  ::tari::rpc::CommitProofElement* PROTOBUF_NONNULL mutable_proof_elements(int index);
  ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>* PROTOBUF_NONNULL mutable_proof_elements();

  private:
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>& _internal_proof_elements() const;
  ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>* PROTOBUF_NONNULL _internal_mutable_proof_elements();
  public:
  const ::tari::rpc::CommitProofElement& proof_elements(int index) const;
  ::tari::rpc::CommitProofElement* PROTOBUF_NONNULL add_proof_elements();
  const ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>& proof_elements() const;
  // .tari.rpc.SidechainBlockHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::tari::rpc::SidechainBlockHeader& header() const;
  [[nodiscard]] ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE release_header();
  ::tari::rpc::SidechainBlockHeader* PROTOBUF_NONNULL mutable_header();
  void set_allocated_header(::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_header(::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE value);
  ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE unsafe_arena_release_header();

  private:
  const ::tari::rpc::SidechainBlockHeader& _internal_header() const;
  ::tari::rpc::SidechainBlockHeader* PROTOBUF_NONNULL _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.SidechainBlockCommitProof)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SidechainBlockCommitProof& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tari::rpc::CommitProofElement > proof_elements_;
    ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SidechainBlockCommitProof_class_data_;
// -------------------------------------------------------------------

class CommitProofV1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.CommitProofV1) */ {
 public:
  inline CommitProofV1() : CommitProofV1(nullptr) {}
  ~CommitProofV1() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitProofV1* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitProofV1));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitProofV1(::google::protobuf::internal::ConstantInitialized);

  inline CommitProofV1(const CommitProofV1& from) : CommitProofV1(nullptr, from) {}
  inline CommitProofV1(CommitProofV1&& from) noexcept
      : CommitProofV1(nullptr, ::std::move(from)) {}
  inline CommitProofV1& operator=(const CommitProofV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitProofV1& operator=(CommitProofV1&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitProofV1& default_instance() {
    return *reinterpret_cast<const CommitProofV1*>(
        &_CommitProofV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(CommitProofV1& a, CommitProofV1& b) { a.Swap(&b); }
  inline void Swap(CommitProofV1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitProofV1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitProofV1* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitProofV1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitProofV1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitProofV1& from) { CommitProofV1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitProofV1* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.CommitProofV1"; }

 protected:
  explicit CommitProofV1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CommitProofV1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CommitProofV1& from);
  CommitProofV1(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CommitProofV1&& from) noexcept
      : CommitProofV1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommandFieldNumber = 1,
    kEncodedInclusionProofFieldNumber = 3,
    kCommitProofFieldNumber = 2,
  };
  // bytes command = 1;
  void clear_command() ;
  const ::std::string& command() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_command();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_command();
  void set_allocated_command(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_command() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_command(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_command();

  public:
  // bytes encoded_inclusion_proof = 3;
  void clear_encoded_inclusion_proof() ;
  const ::std::string& encoded_inclusion_proof() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_encoded_inclusion_proof(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_encoded_inclusion_proof();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_encoded_inclusion_proof();
  void set_allocated_encoded_inclusion_proof(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_encoded_inclusion_proof() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_inclusion_proof(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_encoded_inclusion_proof();

  public:
  // .tari.rpc.SidechainBlockCommitProof commit_proof = 2;
  bool has_commit_proof() const;
  void clear_commit_proof() ;
  const ::tari::rpc::SidechainBlockCommitProof& commit_proof() const;
  [[nodiscard]] ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE release_commit_proof();
  ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NONNULL mutable_commit_proof();
  void set_allocated_commit_proof(::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_commit_proof(::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE value);
  ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE unsafe_arena_release_commit_proof();

  private:
  const ::tari::rpc::SidechainBlockCommitProof& _internal_commit_proof() const;
  ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NONNULL _internal_mutable_commit_proof();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.CommitProofV1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CommitProofV1& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr command_;
    ::google::protobuf::internal::ArenaStringPtr encoded_inclusion_proof_;
    ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE commit_proof_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CommitProofV1_class_data_;
// -------------------------------------------------------------------

class CommitProof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.CommitProof) */ {
 public:
  inline CommitProof() : CommitProof(nullptr) {}
  ~CommitProof() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitProof* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitProof));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitProof(::google::protobuf::internal::ConstantInitialized);

  inline CommitProof(const CommitProof& from) : CommitProof(nullptr, from) {}
  inline CommitProof(CommitProof&& from) noexcept
      : CommitProof(nullptr, ::std::move(from)) {}
  inline CommitProof& operator=(const CommitProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitProof& operator=(CommitProof&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitProof& default_instance() {
    return *reinterpret_cast<const CommitProof*>(
        &_CommitProof_default_instance_);
  }
  enum VersionCase {
    kV1 = 1,
    VERSION_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(CommitProof& a, CommitProof& b) { a.Swap(&b); }
  inline void Swap(CommitProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitProof* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitProof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitProof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitProof& from) { CommitProof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitProof* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.CommitProof"; }

 protected:
  explicit CommitProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CommitProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CommitProof& from);
  CommitProof(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CommitProof&& from) noexcept
      : CommitProof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kV1FieldNumber = 1,
  };
  // .tari.rpc.CommitProofV1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;

  public:
  void clear_v1() ;
  const ::tari::rpc::CommitProofV1& v1() const;
  [[nodiscard]] ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE release_v1();
  ::tari::rpc::CommitProofV1* PROTOBUF_NONNULL mutable_v1();
  void set_allocated_v1(::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_v1(::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE value);
  ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE unsafe_arena_release_v1();

  private:
  const ::tari::rpc::CommitProofV1& _internal_v1() const;
  ::tari::rpc::CommitProofV1* PROTOBUF_NONNULL _internal_mutable_v1();

  public:
  void clear_version();
  VersionCase version_case() const;
  // @@protoc_insertion_point(class_scope:tari.rpc.CommitProof)
 private:
  class _Internal;
  void set_has_v1();
  inline bool has_version() const;
  inline void clear_has_version();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CommitProof& from_msg);
    union VersionUnion {
      constexpr VersionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE v1_;
    } version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CommitProof_class_data_;
// -------------------------------------------------------------------

class EvictionProof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.EvictionProof) */ {
 public:
  inline EvictionProof() : EvictionProof(nullptr) {}
  ~EvictionProof() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EvictionProof* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EvictionProof));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EvictionProof(::google::protobuf::internal::ConstantInitialized);

  inline EvictionProof(const EvictionProof& from) : EvictionProof(nullptr, from) {}
  inline EvictionProof(EvictionProof&& from) noexcept
      : EvictionProof(nullptr, ::std::move(from)) {}
  inline EvictionProof& operator=(const EvictionProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictionProof& operator=(EvictionProof&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvictionProof& default_instance() {
    return *reinterpret_cast<const EvictionProof*>(
        &_EvictionProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(EvictionProof& a, EvictionProof& b) { a.Swap(&b); }
  inline void Swap(EvictionProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictionProof* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvictionProof* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EvictionProof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EvictionProof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EvictionProof& from) { EvictionProof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EvictionProof* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.EvictionProof"; }

 protected:
  explicit EvictionProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  EvictionProof(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EvictionProof& from);
  EvictionProof(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, EvictionProof&& from) noexcept
      : EvictionProof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProofFieldNumber = 1,
  };
  // .tari.rpc.CommitProof proof = 1;
  bool has_proof() const;
  void clear_proof() ;
  const ::tari::rpc::CommitProof& proof() const;
  [[nodiscard]] ::tari::rpc::CommitProof* PROTOBUF_NULLABLE release_proof();
  ::tari::rpc::CommitProof* PROTOBUF_NONNULL mutable_proof();
  void set_allocated_proof(::tari::rpc::CommitProof* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_proof(::tari::rpc::CommitProof* PROTOBUF_NULLABLE value);
  ::tari::rpc::CommitProof* PROTOBUF_NULLABLE unsafe_arena_release_proof();

  private:
  const ::tari::rpc::CommitProof& _internal_proof() const;
  ::tari::rpc::CommitProof* PROTOBUF_NONNULL _internal_mutable_proof();

  public:
  // @@protoc_insertion_point(class_scope:tari.rpc.EvictionProof)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const EvictionProof& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tari::rpc::CommitProof* PROTOBUF_NULLABLE proof_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull EvictionProof_class_data_;
// -------------------------------------------------------------------

class SideChainFeature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tari.rpc.SideChainFeature) */ {
 public:
  inline SideChainFeature() : SideChainFeature(nullptr) {}
  ~SideChainFeature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SideChainFeature* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SideChainFeature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SideChainFeature(::google::protobuf::internal::ConstantInitialized);

  inline SideChainFeature(const SideChainFeature& from) : SideChainFeature(nullptr, from) {}
  inline SideChainFeature(SideChainFeature&& from) noexcept
      : SideChainFeature(nullptr, ::std::move(from)) {}
  inline SideChainFeature& operator=(const SideChainFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideChainFeature& operator=(SideChainFeature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideChainFeature& default_instance() {
    return *reinterpret_cast<const SideChainFeature*>(
        &_SideChainFeature_default_instance_);
  }
  enum FeatureCase {
    kValidatorNodeRegistration = 1,
    kTemplateRegistration = 2,
    kConfidentialOutput = 3,
    kEvictionProof = 4,
    kValidatorNodeExit = 5,
    FEATURE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SideChainFeature& a, SideChainFeature& b) { a.Swap(&b); }
  inline void Swap(SideChainFeature* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideChainFeature* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideChainFeature* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SideChainFeature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SideChainFeature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SideChainFeature& from) { SideChainFeature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SideChainFeature* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tari.rpc.SideChainFeature"; }

 protected:
  explicit SideChainFeature(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SideChainFeature(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SideChainFeature& from);
  SideChainFeature(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SideChainFeature&& from) noexcept
      : SideChainFeature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSidechainIdFieldNumber = 6,
    kValidatorNodeRegistrationFieldNumber = 1,
    kTemplateRegistrationFieldNumber = 2,
    kConfidentialOutputFieldNumber = 3,
    kEvictionProofFieldNumber = 4,
    kValidatorNodeExitFieldNumber = 5,
  };
  // .tari.rpc.SideChainId sidechain_id = 6;
  bool has_sidechain_id() const;
  void clear_sidechain_id() ;
  const ::tari::rpc::SideChainId& sidechain_id() const;
  [[nodiscard]] ::tari::rpc::SideChainId* PROTOBUF_NULLABLE release_sidechain_id();
  ::tari::rpc::SideChainId* PROTOBUF_NONNULL mutable_sidechain_id();
  void set_allocated_sidechain_id(::tari::rpc::SideChainId* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sidechain_id(::tari::rpc::SideChainId* PROTOBUF_NULLABLE value);
  ::tari::rpc::SideChainId* PROTOBUF_NULLABLE unsafe_arena_release_sidechain_id();

  private:
  const ::tari::rpc::SideChainId& _internal_sidechain_id() const;
  ::tari::rpc::SideChainId* PROTOBUF_NONNULL _internal_mutable_sidechain_id();

  public:
  // .tari.rpc.ValidatorNodeRegistration validator_node_registration = 1;
  bool has_validator_node_registration() const;
  private:
  bool _internal_has_validator_node_registration() const;

  public:
  void clear_validator_node_registration() ;
  const ::tari::rpc::ValidatorNodeRegistration& validator_node_registration() const;
  [[nodiscard]] ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE release_validator_node_registration();
  ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NONNULL mutable_validator_node_registration();
  void set_allocated_validator_node_registration(::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_validator_node_registration(::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE value);
  ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE unsafe_arena_release_validator_node_registration();

  private:
  const ::tari::rpc::ValidatorNodeRegistration& _internal_validator_node_registration() const;
  ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NONNULL _internal_mutable_validator_node_registration();

  public:
  // .tari.rpc.TemplateRegistration template_registration = 2;
  bool has_template_registration() const;
  private:
  bool _internal_has_template_registration() const;

  public:
  void clear_template_registration() ;
  const ::tari::rpc::TemplateRegistration& template_registration() const;
  [[nodiscard]] ::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE release_template_registration();
  ::tari::rpc::TemplateRegistration* PROTOBUF_NONNULL mutable_template_registration();
  void set_allocated_template_registration(::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_template_registration(::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE value);
  ::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE unsafe_arena_release_template_registration();

  private:
  const ::tari::rpc::TemplateRegistration& _internal_template_registration() const;
  ::tari::rpc::TemplateRegistration* PROTOBUF_NONNULL _internal_mutable_template_registration();

  public:
  // .tari.rpc.ConfidentialOutputData confidential_output = 3;
  bool has_confidential_output() const;
  private:
  bool _internal_has_confidential_output() const;

  public:
  void clear_confidential_output() ;
  const ::tari::rpc::ConfidentialOutputData& confidential_output() const;
  [[nodiscard]] ::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE release_confidential_output();
  ::tari::rpc::ConfidentialOutputData* PROTOBUF_NONNULL mutable_confidential_output();
  void set_allocated_confidential_output(::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_confidential_output(::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE value);
  ::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE unsafe_arena_release_confidential_output();

  private:
  const ::tari::rpc::ConfidentialOutputData& _internal_confidential_output() const;
  ::tari::rpc::ConfidentialOutputData* PROTOBUF_NONNULL _internal_mutable_confidential_output();

  public:
  // .tari.rpc.EvictionProof eviction_proof = 4;
  bool has_eviction_proof() const;
  private:
  bool _internal_has_eviction_proof() const;

  public:
  void clear_eviction_proof() ;
  const ::tari::rpc::EvictionProof& eviction_proof() const;
  [[nodiscard]] ::tari::rpc::EvictionProof* PROTOBUF_NULLABLE release_eviction_proof();
  ::tari::rpc::EvictionProof* PROTOBUF_NONNULL mutable_eviction_proof();
  void set_allocated_eviction_proof(::tari::rpc::EvictionProof* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_eviction_proof(::tari::rpc::EvictionProof* PROTOBUF_NULLABLE value);
  ::tari::rpc::EvictionProof* PROTOBUF_NULLABLE unsafe_arena_release_eviction_proof();

  private:
  const ::tari::rpc::EvictionProof& _internal_eviction_proof() const;
  ::tari::rpc::EvictionProof* PROTOBUF_NONNULL _internal_mutable_eviction_proof();

  public:
  // .tari.rpc.ValidatorNodeExit validator_node_exit = 5;
  bool has_validator_node_exit() const;
  private:
  bool _internal_has_validator_node_exit() const;

  public:
  void clear_validator_node_exit() ;
  const ::tari::rpc::ValidatorNodeExit& validator_node_exit() const;
  [[nodiscard]] ::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE release_validator_node_exit();
  ::tari::rpc::ValidatorNodeExit* PROTOBUF_NONNULL mutable_validator_node_exit();
  void set_allocated_validator_node_exit(::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_validator_node_exit(::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE value);
  ::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE unsafe_arena_release_validator_node_exit();

  private:
  const ::tari::rpc::ValidatorNodeExit& _internal_validator_node_exit() const;
  ::tari::rpc::ValidatorNodeExit* PROTOBUF_NONNULL _internal_mutable_validator_node_exit();

  public:
  void clear_feature();
  FeatureCase feature_case() const;
  // @@protoc_insertion_point(class_scope:tari.rpc.SideChainFeature)
 private:
  class _Internal;
  void set_has_validator_node_registration();
  void set_has_template_registration();
  void set_has_confidential_output();
  void set_has_eviction_proof();
  void set_has_validator_node_exit();
  inline bool has_feature() const;
  inline void clear_has_feature();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 6,
                                   6, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SideChainFeature& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tari::rpc::SideChainId* PROTOBUF_NULLABLE sidechain_id_;
    union FeatureUnion {
      constexpr FeatureUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE validator_node_registration_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE template_registration_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE confidential_output_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE eviction_proof_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE validator_node_exit_;
    } feature_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidechain_5ftypes_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SideChainFeature_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SideChainFeature

// .tari.rpc.ValidatorNodeRegistration validator_node_registration = 1;
inline bool SideChainFeature::has_validator_node_registration() const {
  return feature_case() == kValidatorNodeRegistration;
}
inline bool SideChainFeature::_internal_has_validator_node_registration() const {
  return feature_case() == kValidatorNodeRegistration;
}
inline void SideChainFeature::set_has_validator_node_registration() {
  _impl_._oneof_case_[0] = kValidatorNodeRegistration;
}
inline void SideChainFeature::clear_validator_node_registration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (feature_case() == kValidatorNodeRegistration) {
    if (GetArena() == nullptr) {
      delete _impl_.feature_.validator_node_registration_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.feature_.validator_node_registration_);
    }
    clear_has_feature();
  }
}
inline ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE SideChainFeature::release_validator_node_registration() {
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.validator_node_registration)
  if (feature_case() == kValidatorNodeRegistration) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ValidatorNodeRegistration*>(_impl_.feature_.validator_node_registration_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feature_.validator_node_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::ValidatorNodeRegistration& SideChainFeature::_internal_validator_node_registration() const {
  return feature_case() == kValidatorNodeRegistration ? *reinterpret_cast<::tari::rpc::ValidatorNodeRegistration*>(_impl_.feature_.validator_node_registration_) : reinterpret_cast<::tari::rpc::ValidatorNodeRegistration&>(::tari::rpc::_ValidatorNodeRegistration_default_instance_);
}
inline const ::tari::rpc::ValidatorNodeRegistration& SideChainFeature::validator_node_registration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.validator_node_registration)
  return _internal_validator_node_registration();
}
inline ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_validator_node_registration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.SideChainFeature.validator_node_registration)
  if (feature_case() == kValidatorNodeRegistration) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ValidatorNodeRegistration*>(_impl_.feature_.validator_node_registration_);
    _impl_.feature_.validator_node_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SideChainFeature::unsafe_arena_set_allocated_validator_node_registration(
    ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_feature();
  if (value) {
    set_has_validator_node_registration();
    _impl_.feature_.validator_node_registration_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.validator_node_registration)
}
inline ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_validator_node_registration() {
  if (feature_case() != kValidatorNodeRegistration) {
    clear_feature();
    set_has_validator_node_registration();
    _impl_.feature_.validator_node_registration_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::ValidatorNodeRegistration>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::ValidatorNodeRegistration*>(_impl_.feature_.validator_node_registration_);
}
inline ::tari::rpc::ValidatorNodeRegistration* PROTOBUF_NONNULL SideChainFeature::mutable_validator_node_registration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::ValidatorNodeRegistration* _msg = _internal_mutable_validator_node_registration();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.validator_node_registration)
  return _msg;
}

// .tari.rpc.TemplateRegistration template_registration = 2;
inline bool SideChainFeature::has_template_registration() const {
  return feature_case() == kTemplateRegistration;
}
inline bool SideChainFeature::_internal_has_template_registration() const {
  return feature_case() == kTemplateRegistration;
}
inline void SideChainFeature::set_has_template_registration() {
  _impl_._oneof_case_[0] = kTemplateRegistration;
}
inline void SideChainFeature::clear_template_registration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (feature_case() == kTemplateRegistration) {
    if (GetArena() == nullptr) {
      delete _impl_.feature_.template_registration_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.feature_.template_registration_);
    }
    clear_has_feature();
  }
}
inline ::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE SideChainFeature::release_template_registration() {
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.template_registration)
  if (feature_case() == kTemplateRegistration) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::TemplateRegistration*>(_impl_.feature_.template_registration_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feature_.template_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::TemplateRegistration& SideChainFeature::_internal_template_registration() const {
  return feature_case() == kTemplateRegistration ? *reinterpret_cast<::tari::rpc::TemplateRegistration*>(_impl_.feature_.template_registration_) : reinterpret_cast<::tari::rpc::TemplateRegistration&>(::tari::rpc::_TemplateRegistration_default_instance_);
}
inline const ::tari::rpc::TemplateRegistration& SideChainFeature::template_registration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.template_registration)
  return _internal_template_registration();
}
inline ::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_template_registration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.SideChainFeature.template_registration)
  if (feature_case() == kTemplateRegistration) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::TemplateRegistration*>(_impl_.feature_.template_registration_);
    _impl_.feature_.template_registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SideChainFeature::unsafe_arena_set_allocated_template_registration(
    ::tari::rpc::TemplateRegistration* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_feature();
  if (value) {
    set_has_template_registration();
    _impl_.feature_.template_registration_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.template_registration)
}
inline ::tari::rpc::TemplateRegistration* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_template_registration() {
  if (feature_case() != kTemplateRegistration) {
    clear_feature();
    set_has_template_registration();
    _impl_.feature_.template_registration_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::TemplateRegistration>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::TemplateRegistration*>(_impl_.feature_.template_registration_);
}
inline ::tari::rpc::TemplateRegistration* PROTOBUF_NONNULL SideChainFeature::mutable_template_registration()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::TemplateRegistration* _msg = _internal_mutable_template_registration();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.template_registration)
  return _msg;
}

// .tari.rpc.ConfidentialOutputData confidential_output = 3;
inline bool SideChainFeature::has_confidential_output() const {
  return feature_case() == kConfidentialOutput;
}
inline bool SideChainFeature::_internal_has_confidential_output() const {
  return feature_case() == kConfidentialOutput;
}
inline void SideChainFeature::set_has_confidential_output() {
  _impl_._oneof_case_[0] = kConfidentialOutput;
}
inline void SideChainFeature::clear_confidential_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (feature_case() == kConfidentialOutput) {
    if (GetArena() == nullptr) {
      delete _impl_.feature_.confidential_output_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.feature_.confidential_output_);
    }
    clear_has_feature();
  }
}
inline ::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE SideChainFeature::release_confidential_output() {
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.confidential_output)
  if (feature_case() == kConfidentialOutput) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ConfidentialOutputData*>(_impl_.feature_.confidential_output_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feature_.confidential_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::ConfidentialOutputData& SideChainFeature::_internal_confidential_output() const {
  return feature_case() == kConfidentialOutput ? *reinterpret_cast<::tari::rpc::ConfidentialOutputData*>(_impl_.feature_.confidential_output_) : reinterpret_cast<::tari::rpc::ConfidentialOutputData&>(::tari::rpc::_ConfidentialOutputData_default_instance_);
}
inline const ::tari::rpc::ConfidentialOutputData& SideChainFeature::confidential_output() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.confidential_output)
  return _internal_confidential_output();
}
inline ::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_confidential_output() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.SideChainFeature.confidential_output)
  if (feature_case() == kConfidentialOutput) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ConfidentialOutputData*>(_impl_.feature_.confidential_output_);
    _impl_.feature_.confidential_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SideChainFeature::unsafe_arena_set_allocated_confidential_output(
    ::tari::rpc::ConfidentialOutputData* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_feature();
  if (value) {
    set_has_confidential_output();
    _impl_.feature_.confidential_output_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.confidential_output)
}
inline ::tari::rpc::ConfidentialOutputData* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_confidential_output() {
  if (feature_case() != kConfidentialOutput) {
    clear_feature();
    set_has_confidential_output();
    _impl_.feature_.confidential_output_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::ConfidentialOutputData>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::ConfidentialOutputData*>(_impl_.feature_.confidential_output_);
}
inline ::tari::rpc::ConfidentialOutputData* PROTOBUF_NONNULL SideChainFeature::mutable_confidential_output()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::ConfidentialOutputData* _msg = _internal_mutable_confidential_output();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.confidential_output)
  return _msg;
}

// .tari.rpc.EvictionProof eviction_proof = 4;
inline bool SideChainFeature::has_eviction_proof() const {
  return feature_case() == kEvictionProof;
}
inline bool SideChainFeature::_internal_has_eviction_proof() const {
  return feature_case() == kEvictionProof;
}
inline void SideChainFeature::set_has_eviction_proof() {
  _impl_._oneof_case_[0] = kEvictionProof;
}
inline void SideChainFeature::clear_eviction_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (feature_case() == kEvictionProof) {
    if (GetArena() == nullptr) {
      delete _impl_.feature_.eviction_proof_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.feature_.eviction_proof_);
    }
    clear_has_feature();
  }
}
inline ::tari::rpc::EvictionProof* PROTOBUF_NULLABLE SideChainFeature::release_eviction_proof() {
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.eviction_proof)
  if (feature_case() == kEvictionProof) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::EvictionProof*>(_impl_.feature_.eviction_proof_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feature_.eviction_proof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::EvictionProof& SideChainFeature::_internal_eviction_proof() const {
  return feature_case() == kEvictionProof ? *reinterpret_cast<::tari::rpc::EvictionProof*>(_impl_.feature_.eviction_proof_) : reinterpret_cast<::tari::rpc::EvictionProof&>(::tari::rpc::_EvictionProof_default_instance_);
}
inline const ::tari::rpc::EvictionProof& SideChainFeature::eviction_proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.eviction_proof)
  return _internal_eviction_proof();
}
inline ::tari::rpc::EvictionProof* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_eviction_proof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.SideChainFeature.eviction_proof)
  if (feature_case() == kEvictionProof) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::EvictionProof*>(_impl_.feature_.eviction_proof_);
    _impl_.feature_.eviction_proof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SideChainFeature::unsafe_arena_set_allocated_eviction_proof(
    ::tari::rpc::EvictionProof* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_feature();
  if (value) {
    set_has_eviction_proof();
    _impl_.feature_.eviction_proof_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.eviction_proof)
}
inline ::tari::rpc::EvictionProof* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_eviction_proof() {
  if (feature_case() != kEvictionProof) {
    clear_feature();
    set_has_eviction_proof();
    _impl_.feature_.eviction_proof_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::EvictionProof>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::EvictionProof*>(_impl_.feature_.eviction_proof_);
}
inline ::tari::rpc::EvictionProof* PROTOBUF_NONNULL SideChainFeature::mutable_eviction_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::EvictionProof* _msg = _internal_mutable_eviction_proof();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.eviction_proof)
  return _msg;
}

// .tari.rpc.ValidatorNodeExit validator_node_exit = 5;
inline bool SideChainFeature::has_validator_node_exit() const {
  return feature_case() == kValidatorNodeExit;
}
inline bool SideChainFeature::_internal_has_validator_node_exit() const {
  return feature_case() == kValidatorNodeExit;
}
inline void SideChainFeature::set_has_validator_node_exit() {
  _impl_._oneof_case_[0] = kValidatorNodeExit;
}
inline void SideChainFeature::clear_validator_node_exit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (feature_case() == kValidatorNodeExit) {
    if (GetArena() == nullptr) {
      delete _impl_.feature_.validator_node_exit_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.feature_.validator_node_exit_);
    }
    clear_has_feature();
  }
}
inline ::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE SideChainFeature::release_validator_node_exit() {
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.validator_node_exit)
  if (feature_case() == kValidatorNodeExit) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ValidatorNodeExit*>(_impl_.feature_.validator_node_exit_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.feature_.validator_node_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::ValidatorNodeExit& SideChainFeature::_internal_validator_node_exit() const {
  return feature_case() == kValidatorNodeExit ? *reinterpret_cast<::tari::rpc::ValidatorNodeExit*>(_impl_.feature_.validator_node_exit_) : reinterpret_cast<::tari::rpc::ValidatorNodeExit&>(::tari::rpc::_ValidatorNodeExit_default_instance_);
}
inline const ::tari::rpc::ValidatorNodeExit& SideChainFeature::validator_node_exit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.validator_node_exit)
  return _internal_validator_node_exit();
}
inline ::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_validator_node_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.SideChainFeature.validator_node_exit)
  if (feature_case() == kValidatorNodeExit) {
    clear_has_feature();
    auto* temp = reinterpret_cast<::tari::rpc::ValidatorNodeExit*>(_impl_.feature_.validator_node_exit_);
    _impl_.feature_.validator_node_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SideChainFeature::unsafe_arena_set_allocated_validator_node_exit(
    ::tari::rpc::ValidatorNodeExit* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_feature();
  if (value) {
    set_has_validator_node_exit();
    _impl_.feature_.validator_node_exit_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.validator_node_exit)
}
inline ::tari::rpc::ValidatorNodeExit* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_validator_node_exit() {
  if (feature_case() != kValidatorNodeExit) {
    clear_feature();
    set_has_validator_node_exit();
    _impl_.feature_.validator_node_exit_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::ValidatorNodeExit>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::ValidatorNodeExit*>(_impl_.feature_.validator_node_exit_);
}
inline ::tari::rpc::ValidatorNodeExit* PROTOBUF_NONNULL SideChainFeature::mutable_validator_node_exit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::ValidatorNodeExit* _msg = _internal_mutable_validator_node_exit();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.validator_node_exit)
  return _msg;
}

// .tari.rpc.SideChainId sidechain_id = 6;
inline bool SideChainFeature::has_sidechain_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sidechain_id_ != nullptr);
  return value;
}
inline void SideChainFeature::clear_sidechain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sidechain_id_ != nullptr) _impl_.sidechain_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tari::rpc::SideChainId& SideChainFeature::_internal_sidechain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::SideChainId* p = _impl_.sidechain_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::SideChainId&>(::tari::rpc::_SideChainId_default_instance_);
}
inline const ::tari::rpc::SideChainId& SideChainFeature::sidechain_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainFeature.sidechain_id)
  return _internal_sidechain_id();
}
inline void SideChainFeature::unsafe_arena_set_allocated_sidechain_id(
    ::tari::rpc::SideChainId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sidechain_id_);
  }
  _impl_.sidechain_id_ = reinterpret_cast<::tari::rpc::SideChainId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainFeature.sidechain_id)
}
inline ::tari::rpc::SideChainId* PROTOBUF_NULLABLE SideChainFeature::release_sidechain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::SideChainId* released = _impl_.sidechain_id_;
  _impl_.sidechain_id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::SideChainId* PROTOBUF_NULLABLE SideChainFeature::unsafe_arena_release_sidechain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainFeature.sidechain_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::SideChainId* temp = _impl_.sidechain_id_;
  _impl_.sidechain_id_ = nullptr;
  return temp;
}
inline ::tari::rpc::SideChainId* PROTOBUF_NONNULL SideChainFeature::_internal_mutable_sidechain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sidechain_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::SideChainId>(GetArena());
    _impl_.sidechain_id_ = reinterpret_cast<::tari::rpc::SideChainId*>(p);
  }
  return _impl_.sidechain_id_;
}
inline ::tari::rpc::SideChainId* PROTOBUF_NONNULL SideChainFeature::mutable_sidechain_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tari::rpc::SideChainId* _msg = _internal_mutable_sidechain_id();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainFeature.sidechain_id)
  return _msg;
}
inline void SideChainFeature::set_allocated_sidechain_id(::tari::rpc::SideChainId* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sidechain_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sidechain_id_ = reinterpret_cast<::tari::rpc::SideChainId*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SideChainFeature.sidechain_id)
}

inline bool SideChainFeature::has_feature() const {
  return feature_case() != FEATURE_NOT_SET;
}
inline void SideChainFeature::clear_has_feature() {
  _impl_._oneof_case_[0] = FEATURE_NOT_SET;
}
inline SideChainFeature::FeatureCase SideChainFeature::feature_case() const {
  return SideChainFeature::FeatureCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SideChainId

// bytes public_key = 1;
inline void SideChainId::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SideChainId::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainId.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SideChainId::set_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SideChainId.public_key)
}
inline ::std::string* PROTOBUF_NONNULL SideChainId::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainId.public_key)
  return _s;
}
inline const ::std::string& SideChainId::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void SideChainId::_internal_set_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SideChainId::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SideChainId::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainId.public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_key_.Set("", GetArena());
  }
  return released;
}
inline void SideChainId::set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SideChainId.public_key)
}

// .tari.rpc.Signature knowledge_proof = 2;
inline bool SideChainId::has_knowledge_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.knowledge_proof_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& SideChainId::_internal_knowledge_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.knowledge_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& SideChainId::knowledge_proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SideChainId.knowledge_proof)
  return _internal_knowledge_proof();
}
inline void SideChainId::unsafe_arena_set_allocated_knowledge_proof(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.knowledge_proof_);
  }
  _impl_.knowledge_proof_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SideChainId.knowledge_proof)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE SideChainId::release_knowledge_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* released = _impl_.knowledge_proof_;
  _impl_.knowledge_proof_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE SideChainId::unsafe_arena_release_knowledge_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SideChainId.knowledge_proof)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* temp = _impl_.knowledge_proof_;
  _impl_.knowledge_proof_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL SideChainId::_internal_mutable_knowledge_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.knowledge_proof_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.knowledge_proof_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.knowledge_proof_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL SideChainId::mutable_knowledge_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tari::rpc::Signature* _msg = _internal_mutable_knowledge_proof();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SideChainId.knowledge_proof)
  return _msg;
}
inline void SideChainId::set_allocated_knowledge_proof(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.knowledge_proof_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.knowledge_proof_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SideChainId.knowledge_proof)
}

// -------------------------------------------------------------------

// ValidatorNodeRegistration

// bytes public_key = 1;
inline void ValidatorNodeRegistration::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ValidatorNodeRegistration::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeRegistration.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ValidatorNodeRegistration::set_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorNodeRegistration.public_key)
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeRegistration::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorNodeRegistration.public_key)
  return _s;
}
inline const ::std::string& ValidatorNodeRegistration::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void ValidatorNodeRegistration::_internal_set_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeRegistration::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ValidatorNodeRegistration::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorNodeRegistration.public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_key_.Set("", GetArena());
  }
  return released;
}
inline void ValidatorNodeRegistration::set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorNodeRegistration.public_key)
}

// .tari.rpc.Signature signature = 2;
inline bool ValidatorNodeRegistration::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& ValidatorNodeRegistration::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& ValidatorNodeRegistration::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeRegistration.signature)
  return _internal_signature();
}
inline void ValidatorNodeRegistration::unsafe_arena_set_allocated_signature(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.ValidatorNodeRegistration.signature)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorNodeRegistration::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tari::rpc::Signature* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorNodeRegistration::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorNodeRegistration.signature)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tari::rpc::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorNodeRegistration::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.signature_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorNodeRegistration::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tari::rpc::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorNodeRegistration.signature)
  return _msg;
}
inline void ValidatorNodeRegistration::set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorNodeRegistration.signature)
}

// bytes claim_public_key = 3;
inline void ValidatorNodeRegistration::clear_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.claim_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ValidatorNodeRegistration::claim_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeRegistration.claim_public_key)
  return _internal_claim_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ValidatorNodeRegistration::set_claim_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.claim_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorNodeRegistration.claim_public_key)
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeRegistration::mutable_claim_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_claim_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorNodeRegistration.claim_public_key)
  return _s;
}
inline const ::std::string& ValidatorNodeRegistration::_internal_claim_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.claim_public_key_.Get();
}
inline void ValidatorNodeRegistration::_internal_set_claim_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.claim_public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeRegistration::_internal_mutable_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.claim_public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ValidatorNodeRegistration::release_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorNodeRegistration.claim_public_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.claim_public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.claim_public_key_.Set("", GetArena());
  }
  return released;
}
inline void ValidatorNodeRegistration::set_allocated_claim_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.claim_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.claim_public_key_.IsDefault()) {
    _impl_.claim_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorNodeRegistration.claim_public_key)
}

// uint64 max_epoch = 4;
inline void ValidatorNodeRegistration::clear_max_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_epoch_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t ValidatorNodeRegistration::max_epoch() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeRegistration.max_epoch)
  return _internal_max_epoch();
}
inline void ValidatorNodeRegistration::set_max_epoch(::uint64_t value) {
  _internal_set_max_epoch(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorNodeRegistration.max_epoch)
}
inline ::uint64_t ValidatorNodeRegistration::_internal_max_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_epoch_;
}
inline void ValidatorNodeRegistration::_internal_set_max_epoch(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_epoch_ = value;
}

// -------------------------------------------------------------------

// ValidatorNodeExit

// bytes public_key = 1;
inline void ValidatorNodeExit::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ValidatorNodeExit::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeExit.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ValidatorNodeExit::set_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorNodeExit.public_key)
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeExit::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorNodeExit.public_key)
  return _s;
}
inline const ::std::string& ValidatorNodeExit::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void ValidatorNodeExit::_internal_set_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ValidatorNodeExit::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ValidatorNodeExit::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorNodeExit.public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_key_.Set("", GetArena());
  }
  return released;
}
inline void ValidatorNodeExit::set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorNodeExit.public_key)
}

// .tari.rpc.Signature signature = 2;
inline bool ValidatorNodeExit::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& ValidatorNodeExit::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& ValidatorNodeExit::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeExit.signature)
  return _internal_signature();
}
inline void ValidatorNodeExit::unsafe_arena_set_allocated_signature(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.ValidatorNodeExit.signature)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorNodeExit::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorNodeExit::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorNodeExit.signature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorNodeExit::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.signature_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorNodeExit::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tari::rpc::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorNodeExit.signature)
  return _msg;
}
inline void ValidatorNodeExit::set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorNodeExit.signature)
}

// uint64 max_epoch = 3;
inline void ValidatorNodeExit::clear_max_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_epoch_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ValidatorNodeExit::max_epoch() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorNodeExit.max_epoch)
  return _internal_max_epoch();
}
inline void ValidatorNodeExit::set_max_epoch(::uint64_t value) {
  _internal_set_max_epoch(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorNodeExit.max_epoch)
}
inline ::uint64_t ValidatorNodeExit::_internal_max_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_epoch_;
}
inline void ValidatorNodeExit::_internal_set_max_epoch(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_epoch_ = value;
}

// -------------------------------------------------------------------

// TemplateRegistration

// bytes author_public_key = 1;
inline void TemplateRegistration::clear_author_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.author_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TemplateRegistration::author_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.author_public_key)
  return _internal_author_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TemplateRegistration::set_author_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.author_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.TemplateRegistration.author_public_key)
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::mutable_author_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_author_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.author_public_key)
  return _s;
}
inline const ::std::string& TemplateRegistration::_internal_author_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.author_public_key_.Get();
}
inline void TemplateRegistration::_internal_set_author_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.author_public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_author_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.author_public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TemplateRegistration::release_author_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.author_public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.author_public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.author_public_key_.Set("", GetArena());
  }
  return released;
}
inline void TemplateRegistration::set_allocated_author_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.author_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.author_public_key_.IsDefault()) {
    _impl_.author_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.author_public_key)
}

// .tari.rpc.Signature author_signature = 2;
inline bool TemplateRegistration::has_author_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_signature_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& TemplateRegistration::_internal_author_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.author_signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& TemplateRegistration::author_signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.author_signature)
  return _internal_author_signature();
}
inline void TemplateRegistration::unsafe_arena_set_allocated_author_signature(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_signature_);
  }
  _impl_.author_signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateRegistration.author_signature)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE TemplateRegistration::release_author_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tari::rpc::Signature* released = _impl_.author_signature_;
  _impl_.author_signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE TemplateRegistration::unsafe_arena_release_author_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.author_signature)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tari::rpc::Signature* temp = _impl_.author_signature_;
  _impl_.author_signature_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_author_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.author_signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.author_signature_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.author_signature_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL TemplateRegistration::mutable_author_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::tari::rpc::Signature* _msg = _internal_mutable_author_signature();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.author_signature)
  return _msg;
}
inline void TemplateRegistration::set_allocated_author_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.author_signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.author_signature)
}

// string template_name = 3;
inline void TemplateRegistration::clear_template_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.template_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TemplateRegistration::template_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.template_name)
  return _internal_template_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TemplateRegistration::set_template_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.template_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.TemplateRegistration.template_name)
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::mutable_template_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_template_name();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.template_name)
  return _s;
}
inline const ::std::string& TemplateRegistration::_internal_template_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.template_name_.Get();
}
inline void TemplateRegistration::_internal_set_template_name(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.template_name_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_template_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.template_name_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TemplateRegistration::release_template_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.template_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.template_name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.template_name_.Set("", GetArena());
  }
  return released;
}
inline void TemplateRegistration::set_allocated_template_name(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.template_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.template_name_.IsDefault()) {
    _impl_.template_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.template_name)
}

// uint32 template_version = 4;
inline void TemplateRegistration::clear_template_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.template_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t TemplateRegistration::template_version() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.template_version)
  return _internal_template_version();
}
inline void TemplateRegistration::set_template_version(::uint32_t value) {
  _internal_set_template_version(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:tari.rpc.TemplateRegistration.template_version)
}
inline ::uint32_t TemplateRegistration::_internal_template_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.template_version_;
}
inline void TemplateRegistration::_internal_set_template_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.template_version_ = value;
}

// .tari.rpc.TemplateType template_type = 5;
inline bool TemplateRegistration::has_template_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.template_type_ != nullptr);
  return value;
}
inline void TemplateRegistration::clear_template_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.template_type_ != nullptr) _impl_.template_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::tari::rpc::TemplateType& TemplateRegistration::_internal_template_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::TemplateType* p = _impl_.template_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::TemplateType&>(::tari::rpc::_TemplateType_default_instance_);
}
inline const ::tari::rpc::TemplateType& TemplateRegistration::template_type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.template_type)
  return _internal_template_type();
}
inline void TemplateRegistration::unsafe_arena_set_allocated_template_type(
    ::tari::rpc::TemplateType* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.template_type_);
  }
  _impl_.template_type_ = reinterpret_cast<::tari::rpc::TemplateType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateRegistration.template_type)
}
inline ::tari::rpc::TemplateType* PROTOBUF_NULLABLE TemplateRegistration::release_template_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tari::rpc::TemplateType* released = _impl_.template_type_;
  _impl_.template_type_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::TemplateType* PROTOBUF_NULLABLE TemplateRegistration::unsafe_arena_release_template_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.template_type)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tari::rpc::TemplateType* temp = _impl_.template_type_;
  _impl_.template_type_ = nullptr;
  return temp;
}
inline ::tari::rpc::TemplateType* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_template_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.template_type_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::TemplateType>(GetArena());
    _impl_.template_type_ = reinterpret_cast<::tari::rpc::TemplateType*>(p);
  }
  return _impl_.template_type_;
}
inline ::tari::rpc::TemplateType* PROTOBUF_NONNULL TemplateRegistration::mutable_template_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tari::rpc::TemplateType* _msg = _internal_mutable_template_type();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.template_type)
  return _msg;
}
inline void TemplateRegistration::set_allocated_template_type(::tari::rpc::TemplateType* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.template_type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.template_type_ = reinterpret_cast<::tari::rpc::TemplateType*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.template_type)
}

// .tari.rpc.BuildInfo build_info = 6;
inline bool TemplateRegistration::has_build_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.build_info_ != nullptr);
  return value;
}
inline void TemplateRegistration::clear_build_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.build_info_ != nullptr) _impl_.build_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::tari::rpc::BuildInfo& TemplateRegistration::_internal_build_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::BuildInfo* p = _impl_.build_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::BuildInfo&>(::tari::rpc::_BuildInfo_default_instance_);
}
inline const ::tari::rpc::BuildInfo& TemplateRegistration::build_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.build_info)
  return _internal_build_info();
}
inline void TemplateRegistration::unsafe_arena_set_allocated_build_info(
    ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.build_info_);
  }
  _impl_.build_info_ = reinterpret_cast<::tari::rpc::BuildInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateRegistration.build_info)
}
inline ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE TemplateRegistration::release_build_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tari::rpc::BuildInfo* released = _impl_.build_info_;
  _impl_.build_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::BuildInfo* PROTOBUF_NULLABLE TemplateRegistration::unsafe_arena_release_build_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.build_info)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tari::rpc::BuildInfo* temp = _impl_.build_info_;
  _impl_.build_info_ = nullptr;
  return temp;
}
inline ::tari::rpc::BuildInfo* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_build_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.build_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::BuildInfo>(GetArena());
    _impl_.build_info_ = reinterpret_cast<::tari::rpc::BuildInfo*>(p);
  }
  return _impl_.build_info_;
}
inline ::tari::rpc::BuildInfo* PROTOBUF_NONNULL TemplateRegistration::mutable_build_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::tari::rpc::BuildInfo* _msg = _internal_mutable_build_info();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.build_info)
  return _msg;
}
inline void TemplateRegistration::set_allocated_build_info(::tari::rpc::BuildInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.build_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.build_info_ = reinterpret_cast<::tari::rpc::BuildInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.build_info)
}

// bytes binary_sha = 7;
inline void TemplateRegistration::clear_binary_sha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binary_sha_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& TemplateRegistration::binary_sha() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.binary_sha)
  return _internal_binary_sha();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TemplateRegistration::set_binary_sha(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.binary_sha_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.TemplateRegistration.binary_sha)
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::mutable_binary_sha()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_binary_sha();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.binary_sha)
  return _s;
}
inline const ::std::string& TemplateRegistration::_internal_binary_sha() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.binary_sha_.Get();
}
inline void TemplateRegistration::_internal_set_binary_sha(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.binary_sha_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_binary_sha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.binary_sha_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TemplateRegistration::release_binary_sha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.binary_sha)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.binary_sha_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.binary_sha_.Set("", GetArena());
  }
  return released;
}
inline void TemplateRegistration::set_allocated_binary_sha(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.binary_sha_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.binary_sha_.IsDefault()) {
    _impl_.binary_sha_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.binary_sha)
}

// string binary_url = 8;
inline void TemplateRegistration::clear_binary_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.binary_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& TemplateRegistration::binary_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateRegistration.binary_url)
  return _internal_binary_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TemplateRegistration::set_binary_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.binary_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.TemplateRegistration.binary_url)
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::mutable_binary_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_binary_url();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateRegistration.binary_url)
  return _s;
}
inline const ::std::string& TemplateRegistration::_internal_binary_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.binary_url_.Get();
}
inline void TemplateRegistration::_internal_set_binary_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.binary_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TemplateRegistration::_internal_mutable_binary_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.binary_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TemplateRegistration::release_binary_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateRegistration.binary_url)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.binary_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.binary_url_.Set("", GetArena());
  }
  return released;
}
inline void TemplateRegistration::set_allocated_binary_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.binary_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.binary_url_.IsDefault()) {
    _impl_.binary_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TemplateRegistration.binary_url)
}

// -------------------------------------------------------------------

// ConfidentialOutputData

// bytes claim_public_key = 1;
inline void ConfidentialOutputData::clear_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.claim_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ConfidentialOutputData::claim_public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ConfidentialOutputData.claim_public_key)
  return _internal_claim_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConfidentialOutputData::set_claim_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.claim_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ConfidentialOutputData.claim_public_key)
}
inline ::std::string* PROTOBUF_NONNULL ConfidentialOutputData::mutable_claim_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_claim_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ConfidentialOutputData.claim_public_key)
  return _s;
}
inline const ::std::string& ConfidentialOutputData::_internal_claim_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.claim_public_key_.Get();
}
inline void ConfidentialOutputData::_internal_set_claim_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.claim_public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ConfidentialOutputData::_internal_mutable_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.claim_public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ConfidentialOutputData::release_claim_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ConfidentialOutputData.claim_public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.claim_public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.claim_public_key_.Set("", GetArena());
  }
  return released;
}
inline void ConfidentialOutputData::set_allocated_claim_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.claim_public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.claim_public_key_.IsDefault()) {
    _impl_.claim_public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ConfidentialOutputData.claim_public_key)
}

// -------------------------------------------------------------------

// TemplateType

// .tari.rpc.WasmInfo wasm = 1;
inline bool TemplateType::has_wasm() const {
  return template_type_case() == kWasm;
}
inline bool TemplateType::_internal_has_wasm() const {
  return template_type_case() == kWasm;
}
inline void TemplateType::set_has_wasm() {
  _impl_._oneof_case_[0] = kWasm;
}
inline void TemplateType::clear_wasm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (template_type_case() == kWasm) {
    if (GetArena() == nullptr) {
      delete _impl_.template_type_.wasm_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.template_type_.wasm_);
    }
    clear_has_template_type();
  }
}
inline ::tari::rpc::WasmInfo* PROTOBUF_NULLABLE TemplateType::release_wasm() {
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateType.wasm)
  if (template_type_case() == kWasm) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::WasmInfo*>(_impl_.template_type_.wasm_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.template_type_.wasm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::WasmInfo& TemplateType::_internal_wasm() const {
  return template_type_case() == kWasm ? *reinterpret_cast<::tari::rpc::WasmInfo*>(_impl_.template_type_.wasm_) : reinterpret_cast<::tari::rpc::WasmInfo&>(::tari::rpc::_WasmInfo_default_instance_);
}
inline const ::tari::rpc::WasmInfo& TemplateType::wasm() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateType.wasm)
  return _internal_wasm();
}
inline ::tari::rpc::WasmInfo* PROTOBUF_NULLABLE TemplateType::unsafe_arena_release_wasm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.TemplateType.wasm)
  if (template_type_case() == kWasm) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::WasmInfo*>(_impl_.template_type_.wasm_);
    _impl_.template_type_.wasm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TemplateType::unsafe_arena_set_allocated_wasm(
    ::tari::rpc::WasmInfo* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_template_type();
  if (value) {
    set_has_wasm();
    _impl_.template_type_.wasm_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateType.wasm)
}
inline ::tari::rpc::WasmInfo* PROTOBUF_NONNULL TemplateType::_internal_mutable_wasm() {
  if (template_type_case() != kWasm) {
    clear_template_type();
    set_has_wasm();
    _impl_.template_type_.wasm_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::WasmInfo>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::WasmInfo*>(_impl_.template_type_.wasm_);
}
inline ::tari::rpc::WasmInfo* PROTOBUF_NONNULL TemplateType::mutable_wasm()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::WasmInfo* _msg = _internal_mutable_wasm();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateType.wasm)
  return _msg;
}

// .tari.rpc.FlowInfo flow = 2;
inline bool TemplateType::has_flow() const {
  return template_type_case() == kFlow;
}
inline bool TemplateType::_internal_has_flow() const {
  return template_type_case() == kFlow;
}
inline void TemplateType::set_has_flow() {
  _impl_._oneof_case_[0] = kFlow;
}
inline void TemplateType::clear_flow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (template_type_case() == kFlow) {
    if (GetArena() == nullptr) {
      delete _impl_.template_type_.flow_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.template_type_.flow_);
    }
    clear_has_template_type();
  }
}
inline ::tari::rpc::FlowInfo* PROTOBUF_NULLABLE TemplateType::release_flow() {
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateType.flow)
  if (template_type_case() == kFlow) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::FlowInfo*>(_impl_.template_type_.flow_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.template_type_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::FlowInfo& TemplateType::_internal_flow() const {
  return template_type_case() == kFlow ? *reinterpret_cast<::tari::rpc::FlowInfo*>(_impl_.template_type_.flow_) : reinterpret_cast<::tari::rpc::FlowInfo&>(::tari::rpc::_FlowInfo_default_instance_);
}
inline const ::tari::rpc::FlowInfo& TemplateType::flow() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateType.flow)
  return _internal_flow();
}
inline ::tari::rpc::FlowInfo* PROTOBUF_NULLABLE TemplateType::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.TemplateType.flow)
  if (template_type_case() == kFlow) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::FlowInfo*>(_impl_.template_type_.flow_);
    _impl_.template_type_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TemplateType::unsafe_arena_set_allocated_flow(
    ::tari::rpc::FlowInfo* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_template_type();
  if (value) {
    set_has_flow();
    _impl_.template_type_.flow_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateType.flow)
}
inline ::tari::rpc::FlowInfo* PROTOBUF_NONNULL TemplateType::_internal_mutable_flow() {
  if (template_type_case() != kFlow) {
    clear_template_type();
    set_has_flow();
    _impl_.template_type_.flow_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::FlowInfo>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::FlowInfo*>(_impl_.template_type_.flow_);
}
inline ::tari::rpc::FlowInfo* PROTOBUF_NONNULL TemplateType::mutable_flow()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::FlowInfo* _msg = _internal_mutable_flow();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateType.flow)
  return _msg;
}

// .tari.rpc.ManifestInfo manifest = 3;
inline bool TemplateType::has_manifest() const {
  return template_type_case() == kManifest;
}
inline bool TemplateType::_internal_has_manifest() const {
  return template_type_case() == kManifest;
}
inline void TemplateType::set_has_manifest() {
  _impl_._oneof_case_[0] = kManifest;
}
inline void TemplateType::clear_manifest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (template_type_case() == kManifest) {
    if (GetArena() == nullptr) {
      delete _impl_.template_type_.manifest_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.template_type_.manifest_);
    }
    clear_has_template_type();
  }
}
inline ::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE TemplateType::release_manifest() {
  // @@protoc_insertion_point(field_release:tari.rpc.TemplateType.manifest)
  if (template_type_case() == kManifest) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::ManifestInfo*>(_impl_.template_type_.manifest_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.template_type_.manifest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::ManifestInfo& TemplateType::_internal_manifest() const {
  return template_type_case() == kManifest ? *reinterpret_cast<::tari::rpc::ManifestInfo*>(_impl_.template_type_.manifest_) : reinterpret_cast<::tari::rpc::ManifestInfo&>(::tari::rpc::_ManifestInfo_default_instance_);
}
inline const ::tari::rpc::ManifestInfo& TemplateType::manifest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.TemplateType.manifest)
  return _internal_manifest();
}
inline ::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE TemplateType::unsafe_arena_release_manifest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.TemplateType.manifest)
  if (template_type_case() == kManifest) {
    clear_has_template_type();
    auto* temp = reinterpret_cast<::tari::rpc::ManifestInfo*>(_impl_.template_type_.manifest_);
    _impl_.template_type_.manifest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TemplateType::unsafe_arena_set_allocated_manifest(
    ::tari::rpc::ManifestInfo* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_template_type();
  if (value) {
    set_has_manifest();
    _impl_.template_type_.manifest_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TemplateType.manifest)
}
inline ::tari::rpc::ManifestInfo* PROTOBUF_NONNULL TemplateType::_internal_mutable_manifest() {
  if (template_type_case() != kManifest) {
    clear_template_type();
    set_has_manifest();
    _impl_.template_type_.manifest_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::ManifestInfo>(GetArena()));
  }
  return reinterpret_cast<::tari::rpc::ManifestInfo*>(_impl_.template_type_.manifest_);
}
inline ::tari::rpc::ManifestInfo* PROTOBUF_NONNULL TemplateType::mutable_manifest()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::ManifestInfo* _msg = _internal_mutable_manifest();
  // @@protoc_insertion_point(field_mutable:tari.rpc.TemplateType.manifest)
  return _msg;
}

inline bool TemplateType::has_template_type() const {
  return template_type_case() != TEMPLATE_TYPE_NOT_SET;
}
inline void TemplateType::clear_has_template_type() {
  _impl_._oneof_case_[0] = TEMPLATE_TYPE_NOT_SET;
}
inline TemplateType::TemplateTypeCase TemplateType::template_type_case() const {
  return TemplateType::TemplateTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WasmInfo

// uint32 abi_version = 1;
inline void WasmInfo::clear_abi_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abi_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t WasmInfo::abi_version() const {
  // @@protoc_insertion_point(field_get:tari.rpc.WasmInfo.abi_version)
  return _internal_abi_version();
}
inline void WasmInfo::set_abi_version(::uint32_t value) {
  _internal_set_abi_version(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tari.rpc.WasmInfo.abi_version)
}
inline ::uint32_t WasmInfo::_internal_abi_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abi_version_;
}
inline void WasmInfo::_internal_set_abi_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abi_version_ = value;
}

// -------------------------------------------------------------------

// FlowInfo

// -------------------------------------------------------------------

// ManifestInfo

// -------------------------------------------------------------------

// BuildInfo

// string repo_url = 1;
inline void BuildInfo::clear_repo_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.repo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BuildInfo::repo_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.BuildInfo.repo_url)
  return _internal_repo_url();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void BuildInfo::set_repo_url(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.repo_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.BuildInfo.repo_url)
}
inline ::std::string* PROTOBUF_NONNULL BuildInfo::mutable_repo_url()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_repo_url();
  // @@protoc_insertion_point(field_mutable:tari.rpc.BuildInfo.repo_url)
  return _s;
}
inline const ::std::string& BuildInfo::_internal_repo_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.repo_url_.Get();
}
inline void BuildInfo::_internal_set_repo_url(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.repo_url_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL BuildInfo::_internal_mutable_repo_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.repo_url_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE BuildInfo::release_repo_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.BuildInfo.repo_url)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.repo_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.repo_url_.Set("", GetArena());
  }
  return released;
}
inline void BuildInfo::set_allocated_repo_url(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.repo_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.repo_url_.IsDefault()) {
    _impl_.repo_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BuildInfo.repo_url)
}

// bytes commit_hash = 2;
inline void BuildInfo::clear_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& BuildInfo::commit_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.BuildInfo.commit_hash)
  return _internal_commit_hash();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void BuildInfo::set_commit_hash(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.commit_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.BuildInfo.commit_hash)
}
inline ::std::string* PROTOBUF_NONNULL BuildInfo::mutable_commit_hash()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_commit_hash();
  // @@protoc_insertion_point(field_mutable:tari.rpc.BuildInfo.commit_hash)
  return _s;
}
inline const ::std::string& BuildInfo::_internal_commit_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commit_hash_.Get();
}
inline void BuildInfo::_internal_set_commit_hash(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.commit_hash_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL BuildInfo::_internal_mutable_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.commit_hash_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE BuildInfo::release_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.BuildInfo.commit_hash)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.commit_hash_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.commit_hash_.Set("", GetArena());
  }
  return released;
}
inline void BuildInfo::set_allocated_commit_hash(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.commit_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.commit_hash_.IsDefault()) {
    _impl_.commit_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BuildInfo.commit_hash)
}

// -------------------------------------------------------------------

// EvictionProof

// .tari.rpc.CommitProof proof = 1;
inline bool EvictionProof::has_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ != nullptr);
  return value;
}
inline void EvictionProof::clear_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tari::rpc::CommitProof& EvictionProof::_internal_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::CommitProof* p = _impl_.proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::CommitProof&>(::tari::rpc::_CommitProof_default_instance_);
}
inline const ::tari::rpc::CommitProof& EvictionProof::proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.EvictionProof.proof)
  return _internal_proof();
}
inline void EvictionProof::unsafe_arena_set_allocated_proof(
    ::tari::rpc::CommitProof* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proof_);
  }
  _impl_.proof_ = reinterpret_cast<::tari::rpc::CommitProof*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.EvictionProof.proof)
}
inline ::tari::rpc::CommitProof* PROTOBUF_NULLABLE EvictionProof::release_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::CommitProof* released = _impl_.proof_;
  _impl_.proof_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::CommitProof* PROTOBUF_NULLABLE EvictionProof::unsafe_arena_release_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.EvictionProof.proof)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::CommitProof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
  return temp;
}
inline ::tari::rpc::CommitProof* PROTOBUF_NONNULL EvictionProof::_internal_mutable_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::CommitProof>(GetArena());
    _impl_.proof_ = reinterpret_cast<::tari::rpc::CommitProof*>(p);
  }
  return _impl_.proof_;
}
inline ::tari::rpc::CommitProof* PROTOBUF_NONNULL EvictionProof::mutable_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tari::rpc::CommitProof* _msg = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:tari.rpc.EvictionProof.proof)
  return _msg;
}
inline void EvictionProof::set_allocated_proof(::tari::rpc::CommitProof* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proof_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proof_ = reinterpret_cast<::tari::rpc::CommitProof*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.EvictionProof.proof)
}

// -------------------------------------------------------------------

// CommitProof

// .tari.rpc.CommitProofV1 v1 = 1;
inline bool CommitProof::has_v1() const {
  return version_case() == kV1;
}
inline bool CommitProof::_internal_has_v1() const {
  return version_case() == kV1;
}
inline void CommitProof::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void CommitProof::clear_v1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (version_case() == kV1) {
    if (GetArena() == nullptr) {
      delete _impl_.version_.v1_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.version_.v1_);
    }
    clear_has_version();
  }
}
inline ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE CommitProof::release_v1() {
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProof.v1)
  if (version_case() == kV1) {
    clear_has_version();
    auto* temp = _impl_.version_.v1_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.version_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::CommitProofV1& CommitProof::_internal_v1() const {
  return version_case() == kV1 ? *_impl_.version_.v1_ : reinterpret_cast<::tari::rpc::CommitProofV1&>(::tari::rpc::_CommitProofV1_default_instance_);
}
inline const ::tari::rpc::CommitProofV1& CommitProof::v1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProof.v1)
  return _internal_v1();
}
inline ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE CommitProof::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.CommitProof.v1)
  if (version_case() == kV1) {
    clear_has_version();
    auto* temp = _impl_.version_.v1_;
    _impl_.version_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommitProof::unsafe_arena_set_allocated_v1(
    ::tari::rpc::CommitProofV1* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_version();
  if (value) {
    set_has_v1();
    _impl_.version_.v1_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.CommitProof.v1)
}
inline ::tari::rpc::CommitProofV1* PROTOBUF_NONNULL CommitProof::_internal_mutable_v1() {
  if (version_case() != kV1) {
    clear_version();
    set_has_v1();
    _impl_.version_.v1_ = 
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::CommitProofV1>(GetArena());
  }
  return _impl_.version_.v1_;
}
inline ::tari::rpc::CommitProofV1* PROTOBUF_NONNULL CommitProof::mutable_v1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::CommitProofV1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProof.v1)
  return _msg;
}

inline bool CommitProof::has_version() const {
  return version_case() != VERSION_NOT_SET;
}
inline void CommitProof::clear_has_version() {
  _impl_._oneof_case_[0] = VERSION_NOT_SET;
}
inline CommitProof::VersionCase CommitProof::version_case() const {
  return CommitProof::VersionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitProofV1

// bytes command = 1;
inline void CommitProofV1::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CommitProofV1::command() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProofV1.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CommitProofV1::set_command(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.command_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.CommitProofV1.command)
}
inline ::std::string* PROTOBUF_NONNULL CommitProofV1::mutable_command()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProofV1.command)
  return _s;
}
inline const ::std::string& CommitProofV1::_internal_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_.Get();
}
inline void CommitProofV1::_internal_set_command(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.command_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CommitProofV1::_internal_mutable_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.command_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CommitProofV1::release_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProofV1.command)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.command_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.command_.Set("", GetArena());
  }
  return released;
}
inline void CommitProofV1::set_allocated_command(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.command_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.CommitProofV1.command)
}

// .tari.rpc.SidechainBlockCommitProof commit_proof = 2;
inline bool CommitProofV1::has_commit_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_proof_ != nullptr);
  return value;
}
inline void CommitProofV1::clear_commit_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.commit_proof_ != nullptr) _impl_.commit_proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tari::rpc::SidechainBlockCommitProof& CommitProofV1::_internal_commit_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::SidechainBlockCommitProof* p = _impl_.commit_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::SidechainBlockCommitProof&>(::tari::rpc::_SidechainBlockCommitProof_default_instance_);
}
inline const ::tari::rpc::SidechainBlockCommitProof& CommitProofV1::commit_proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProofV1.commit_proof)
  return _internal_commit_proof();
}
inline void CommitProofV1::unsafe_arena_set_allocated_commit_proof(
    ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commit_proof_);
  }
  _impl_.commit_proof_ = reinterpret_cast<::tari::rpc::SidechainBlockCommitProof*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.CommitProofV1.commit_proof)
}
inline ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE CommitProofV1::release_commit_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tari::rpc::SidechainBlockCommitProof* released = _impl_.commit_proof_;
  _impl_.commit_proof_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE CommitProofV1::unsafe_arena_release_commit_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProofV1.commit_proof)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tari::rpc::SidechainBlockCommitProof* temp = _impl_.commit_proof_;
  _impl_.commit_proof_ = nullptr;
  return temp;
}
inline ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NONNULL CommitProofV1::_internal_mutable_commit_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.commit_proof_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::SidechainBlockCommitProof>(GetArena());
    _impl_.commit_proof_ = reinterpret_cast<::tari::rpc::SidechainBlockCommitProof*>(p);
  }
  return _impl_.commit_proof_;
}
inline ::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NONNULL CommitProofV1::mutable_commit_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tari::rpc::SidechainBlockCommitProof* _msg = _internal_mutable_commit_proof();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProofV1.commit_proof)
  return _msg;
}
inline void CommitProofV1::set_allocated_commit_proof(::tari::rpc::SidechainBlockCommitProof* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commit_proof_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.commit_proof_ = reinterpret_cast<::tari::rpc::SidechainBlockCommitProof*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.CommitProofV1.commit_proof)
}

// bytes encoded_inclusion_proof = 3;
inline void CommitProofV1::clear_encoded_inclusion_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoded_inclusion_proof_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CommitProofV1::encoded_inclusion_proof() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProofV1.encoded_inclusion_proof)
  return _internal_encoded_inclusion_proof();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CommitProofV1::set_encoded_inclusion_proof(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.encoded_inclusion_proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.CommitProofV1.encoded_inclusion_proof)
}
inline ::std::string* PROTOBUF_NONNULL CommitProofV1::mutable_encoded_inclusion_proof()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_encoded_inclusion_proof();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProofV1.encoded_inclusion_proof)
  return _s;
}
inline const ::std::string& CommitProofV1::_internal_encoded_inclusion_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.encoded_inclusion_proof_.Get();
}
inline void CommitProofV1::_internal_set_encoded_inclusion_proof(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.encoded_inclusion_proof_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL CommitProofV1::_internal_mutable_encoded_inclusion_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.encoded_inclusion_proof_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE CommitProofV1::release_encoded_inclusion_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProofV1.encoded_inclusion_proof)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.encoded_inclusion_proof_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.encoded_inclusion_proof_.Set("", GetArena());
  }
  return released;
}
inline void CommitProofV1::set_allocated_encoded_inclusion_proof(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.encoded_inclusion_proof_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.encoded_inclusion_proof_.IsDefault()) {
    _impl_.encoded_inclusion_proof_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.CommitProofV1.encoded_inclusion_proof)
}

// -------------------------------------------------------------------

// SidechainBlockCommitProof

// .tari.rpc.SidechainBlockHeader header = 1;
inline bool SidechainBlockCommitProof::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void SidechainBlockCommitProof::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tari::rpc::SidechainBlockHeader& SidechainBlockCommitProof::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::SidechainBlockHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::SidechainBlockHeader&>(::tari::rpc::_SidechainBlockHeader_default_instance_);
}
inline const ::tari::rpc::SidechainBlockHeader& SidechainBlockCommitProof::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockCommitProof.header)
  return _internal_header();
}
inline void SidechainBlockCommitProof::unsafe_arena_set_allocated_header(
    ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::tari::rpc::SidechainBlockHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SidechainBlockCommitProof.header)
}
inline ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE SidechainBlockCommitProof::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::SidechainBlockHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE SidechainBlockCommitProof::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockCommitProof.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tari::rpc::SidechainBlockHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::tari::rpc::SidechainBlockHeader* PROTOBUF_NONNULL SidechainBlockCommitProof::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::SidechainBlockHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::tari::rpc::SidechainBlockHeader*>(p);
  }
  return _impl_.header_;
}
inline ::tari::rpc::SidechainBlockHeader* PROTOBUF_NONNULL SidechainBlockCommitProof::mutable_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tari::rpc::SidechainBlockHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockCommitProof.header)
  return _msg;
}
inline void SidechainBlockCommitProof::set_allocated_header(::tari::rpc::SidechainBlockHeader* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::tari::rpc::SidechainBlockHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockCommitProof.header)
}

// repeated .tari.rpc.CommitProofElement proof_elements = 2;
inline int SidechainBlockCommitProof::_internal_proof_elements_size() const {
  return _internal_proof_elements().size();
}
inline int SidechainBlockCommitProof::proof_elements_size() const {
  return _internal_proof_elements_size();
}
inline void SidechainBlockCommitProof::clear_proof_elements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proof_elements_.Clear();
}
inline ::tari::rpc::CommitProofElement* PROTOBUF_NONNULL SidechainBlockCommitProof::mutable_proof_elements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockCommitProof.proof_elements)
  return _internal_mutable_proof_elements()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>* PROTOBUF_NONNULL SidechainBlockCommitProof::mutable_proof_elements()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.SidechainBlockCommitProof.proof_elements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_proof_elements();
}
inline const ::tari::rpc::CommitProofElement& SidechainBlockCommitProof::proof_elements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockCommitProof.proof_elements)
  return _internal_proof_elements().Get(index);
}
inline ::tari::rpc::CommitProofElement* PROTOBUF_NONNULL SidechainBlockCommitProof::add_proof_elements()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tari::rpc::CommitProofElement* _add = _internal_mutable_proof_elements()->Add();
  // @@protoc_insertion_point(field_add:tari.rpc.SidechainBlockCommitProof.proof_elements)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>& SidechainBlockCommitProof::proof_elements() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tari.rpc.SidechainBlockCommitProof.proof_elements)
  return _internal_proof_elements();
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>&
SidechainBlockCommitProof::_internal_proof_elements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proof_elements_;
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::CommitProofElement>* PROTOBUF_NONNULL
SidechainBlockCommitProof::_internal_mutable_proof_elements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.proof_elements_;
}

// -------------------------------------------------------------------

// CommitProofElement

// .tari.rpc.QuorumCertificate quorum_certificate = 1;
inline bool CommitProofElement::has_quorum_certificate() const {
  return proof_element_case() == kQuorumCertificate;
}
inline bool CommitProofElement::_internal_has_quorum_certificate() const {
  return proof_element_case() == kQuorumCertificate;
}
inline void CommitProofElement::set_has_quorum_certificate() {
  _impl_._oneof_case_[0] = kQuorumCertificate;
}
inline void CommitProofElement::clear_quorum_certificate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (proof_element_case() == kQuorumCertificate) {
    if (GetArena() == nullptr) {
      delete _impl_.proof_element_.quorum_certificate_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.proof_element_.quorum_certificate_);
    }
    clear_has_proof_element();
  }
}
inline ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE CommitProofElement::release_quorum_certificate() {
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProofElement.quorum_certificate)
  if (proof_element_case() == kQuorumCertificate) {
    clear_has_proof_element();
    auto* temp = _impl_.proof_element_.quorum_certificate_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.proof_element_.quorum_certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::QuorumCertificate& CommitProofElement::_internal_quorum_certificate() const {
  return proof_element_case() == kQuorumCertificate ? *_impl_.proof_element_.quorum_certificate_ : reinterpret_cast<::tari::rpc::QuorumCertificate&>(::tari::rpc::_QuorumCertificate_default_instance_);
}
inline const ::tari::rpc::QuorumCertificate& CommitProofElement::quorum_certificate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProofElement.quorum_certificate)
  return _internal_quorum_certificate();
}
inline ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE CommitProofElement::unsafe_arena_release_quorum_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.CommitProofElement.quorum_certificate)
  if (proof_element_case() == kQuorumCertificate) {
    clear_has_proof_element();
    auto* temp = _impl_.proof_element_.quorum_certificate_;
    _impl_.proof_element_.quorum_certificate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommitProofElement::unsafe_arena_set_allocated_quorum_certificate(
    ::tari::rpc::QuorumCertificate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_proof_element();
  if (value) {
    set_has_quorum_certificate();
    _impl_.proof_element_.quorum_certificate_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.CommitProofElement.quorum_certificate)
}
inline ::tari::rpc::QuorumCertificate* PROTOBUF_NONNULL CommitProofElement::_internal_mutable_quorum_certificate() {
  if (proof_element_case() != kQuorumCertificate) {
    clear_proof_element();
    set_has_quorum_certificate();
    _impl_.proof_element_.quorum_certificate_ = 
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::QuorumCertificate>(GetArena());
  }
  return _impl_.proof_element_.quorum_certificate_;
}
inline ::tari::rpc::QuorumCertificate* PROTOBUF_NONNULL CommitProofElement::mutable_quorum_certificate()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::QuorumCertificate* _msg = _internal_mutable_quorum_certificate();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProofElement.quorum_certificate)
  return _msg;
}

// .tari.rpc.DummyChain dummy_chain = 2;
inline bool CommitProofElement::has_dummy_chain() const {
  return proof_element_case() == kDummyChain;
}
inline bool CommitProofElement::_internal_has_dummy_chain() const {
  return proof_element_case() == kDummyChain;
}
inline void CommitProofElement::set_has_dummy_chain() {
  _impl_._oneof_case_[0] = kDummyChain;
}
inline void CommitProofElement::clear_dummy_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (proof_element_case() == kDummyChain) {
    if (GetArena() == nullptr) {
      delete _impl_.proof_element_.dummy_chain_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.proof_element_.dummy_chain_);
    }
    clear_has_proof_element();
  }
}
inline ::tari::rpc::DummyChain* PROTOBUF_NULLABLE CommitProofElement::release_dummy_chain() {
  // @@protoc_insertion_point(field_release:tari.rpc.CommitProofElement.dummy_chain)
  if (proof_element_case() == kDummyChain) {
    clear_has_proof_element();
    auto* temp = _impl_.proof_element_.dummy_chain_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.proof_element_.dummy_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tari::rpc::DummyChain& CommitProofElement::_internal_dummy_chain() const {
  return proof_element_case() == kDummyChain ? *_impl_.proof_element_.dummy_chain_ : reinterpret_cast<::tari::rpc::DummyChain&>(::tari::rpc::_DummyChain_default_instance_);
}
inline const ::tari::rpc::DummyChain& CommitProofElement::dummy_chain() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.CommitProofElement.dummy_chain)
  return _internal_dummy_chain();
}
inline ::tari::rpc::DummyChain* PROTOBUF_NULLABLE CommitProofElement::unsafe_arena_release_dummy_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tari.rpc.CommitProofElement.dummy_chain)
  if (proof_element_case() == kDummyChain) {
    clear_has_proof_element();
    auto* temp = _impl_.proof_element_.dummy_chain_;
    _impl_.proof_element_.dummy_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommitProofElement::unsafe_arena_set_allocated_dummy_chain(
    ::tari::rpc::DummyChain* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_proof_element();
  if (value) {
    set_has_dummy_chain();
    _impl_.proof_element_.dummy_chain_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.CommitProofElement.dummy_chain)
}
inline ::tari::rpc::DummyChain* PROTOBUF_NONNULL CommitProofElement::_internal_mutable_dummy_chain() {
  if (proof_element_case() != kDummyChain) {
    clear_proof_element();
    set_has_dummy_chain();
    _impl_.proof_element_.dummy_chain_ = 
        ::google::protobuf::Message::DefaultConstruct<::tari::rpc::DummyChain>(GetArena());
  }
  return _impl_.proof_element_.dummy_chain_;
}
inline ::tari::rpc::DummyChain* PROTOBUF_NONNULL CommitProofElement::mutable_dummy_chain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tari::rpc::DummyChain* _msg = _internal_mutable_dummy_chain();
  // @@protoc_insertion_point(field_mutable:tari.rpc.CommitProofElement.dummy_chain)
  return _msg;
}

inline bool CommitProofElement::has_proof_element() const {
  return proof_element_case() != PROOF_ELEMENT_NOT_SET;
}
inline void CommitProofElement::clear_has_proof_element() {
  _impl_._oneof_case_[0] = PROOF_ELEMENT_NOT_SET;
}
inline CommitProofElement::ProofElementCase CommitProofElement::proof_element_case() const {
  return CommitProofElement::ProofElementCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DummyChain

// repeated .tari.rpc.ChainLink chain_links = 1;
inline int DummyChain::_internal_chain_links_size() const {
  return _internal_chain_links().size();
}
inline int DummyChain::chain_links_size() const {
  return _internal_chain_links_size();
}
inline void DummyChain::clear_chain_links() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_links_.Clear();
}
inline ::tari::rpc::ChainLink* PROTOBUF_NONNULL DummyChain::mutable_chain_links(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tari.rpc.DummyChain.chain_links)
  return _internal_mutable_chain_links()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>* PROTOBUF_NONNULL DummyChain::mutable_chain_links()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.DummyChain.chain_links)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chain_links();
}
inline const ::tari::rpc::ChainLink& DummyChain::chain_links(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.DummyChain.chain_links)
  return _internal_chain_links().Get(index);
}
inline ::tari::rpc::ChainLink* PROTOBUF_NONNULL DummyChain::add_chain_links()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tari::rpc::ChainLink* _add = _internal_mutable_chain_links()->Add();
  // @@protoc_insertion_point(field_add:tari.rpc.DummyChain.chain_links)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>& DummyChain::chain_links() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tari.rpc.DummyChain.chain_links)
  return _internal_chain_links();
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>&
DummyChain::_internal_chain_links() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_links_;
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::ChainLink>* PROTOBUF_NONNULL
DummyChain::_internal_mutable_chain_links() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chain_links_;
}

// -------------------------------------------------------------------

// ChainLink

// bytes header_hash = 1;
inline void ChainLink::clear_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ChainLink::header_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ChainLink.header_hash)
  return _internal_header_hash();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ChainLink::set_header_hash(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ChainLink.header_hash)
}
inline ::std::string* PROTOBUF_NONNULL ChainLink::mutable_header_hash()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_header_hash();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ChainLink.header_hash)
  return _s;
}
inline const ::std::string& ChainLink::_internal_header_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_hash_.Get();
}
inline void ChainLink::_internal_set_header_hash(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_hash_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ChainLink::_internal_mutable_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.header_hash_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ChainLink::release_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ChainLink.header_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.header_hash_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.header_hash_.Set("", GetArena());
  }
  return released;
}
inline void ChainLink::set_allocated_header_hash(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.header_hash_.IsDefault()) {
    _impl_.header_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ChainLink.header_hash)
}

// bytes parent_id = 2;
inline void ChainLink::clear_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ChainLink::parent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ChainLink.parent_id)
  return _internal_parent_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ChainLink::set_parent_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.parent_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ChainLink.parent_id)
}
inline ::std::string* PROTOBUF_NONNULL ChainLink::mutable_parent_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ChainLink.parent_id)
  return _s;
}
inline const ::std::string& ChainLink::_internal_parent_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_id_.Get();
}
inline void ChainLink::_internal_set_parent_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.parent_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ChainLink::_internal_mutable_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.parent_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ChainLink::release_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ChainLink.parent_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.parent_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  return released;
}
inline void ChainLink::set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.parent_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parent_id_.IsDefault()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ChainLink.parent_id)
}

// -------------------------------------------------------------------

// SidechainBlockHeader

// uint32 network = 1;
inline void SidechainBlockHeader::clear_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t SidechainBlockHeader::network() const {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.network)
  return _internal_network();
}
inline void SidechainBlockHeader::set_network(::uint32_t value) {
  _internal_set_network(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.network)
}
inline ::uint32_t SidechainBlockHeader::_internal_network() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_;
}
inline void SidechainBlockHeader::_internal_set_network(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_ = value;
}

// bytes parent_id = 2;
inline void SidechainBlockHeader::clear_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SidechainBlockHeader::parent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.parent_id)
  return _internal_parent_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_parent_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parent_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.parent_id)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_parent_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.parent_id)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_parent_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_id_.Get();
}
inline void SidechainBlockHeader::_internal_set_parent_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parent_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.parent_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.parent_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.parent_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.parent_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parent_id_.IsDefault()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.parent_id)
}

// bytes justify_id = 3;
inline void SidechainBlockHeader::clear_justify_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.justify_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& SidechainBlockHeader::justify_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.justify_id)
  return _internal_justify_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_justify_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.justify_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.justify_id)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_justify_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_justify_id();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.justify_id)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_justify_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.justify_id_.Get();
}
inline void SidechainBlockHeader::_internal_set_justify_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.justify_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_justify_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.justify_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_justify_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.justify_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.justify_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.justify_id_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_justify_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.justify_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.justify_id_.IsDefault()) {
    _impl_.justify_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.justify_id)
}

// uint64 height = 4;
inline void SidechainBlockHeader::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t SidechainBlockHeader::height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.height)
  return _internal_height();
}
inline void SidechainBlockHeader::set_height(::uint64_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.height)
}
inline ::uint64_t SidechainBlockHeader::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void SidechainBlockHeader::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint64 epoch = 5;
inline void SidechainBlockHeader::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t SidechainBlockHeader::epoch() const {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.epoch)
  return _internal_epoch();
}
inline void SidechainBlockHeader::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.epoch)
}
inline ::uint64_t SidechainBlockHeader::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_;
}
inline void SidechainBlockHeader::_internal_set_epoch(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_ = value;
}

// .tari.rpc.ShardGroup shard_group = 6;
inline bool SidechainBlockHeader::has_shard_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shard_group_ != nullptr);
  return value;
}
inline void SidechainBlockHeader::clear_shard_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shard_group_ != nullptr) _impl_.shard_group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::tari::rpc::ShardGroup& SidechainBlockHeader::_internal_shard_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::ShardGroup* p = _impl_.shard_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::ShardGroup&>(::tari::rpc::_ShardGroup_default_instance_);
}
inline const ::tari::rpc::ShardGroup& SidechainBlockHeader::shard_group() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.shard_group)
  return _internal_shard_group();
}
inline void SidechainBlockHeader::unsafe_arena_set_allocated_shard_group(
    ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shard_group_);
  }
  _impl_.shard_group_ = reinterpret_cast<::tari::rpc::ShardGroup*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SidechainBlockHeader.shard_group)
}
inline ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE SidechainBlockHeader::release_shard_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tari::rpc::ShardGroup* released = _impl_.shard_group_;
  _impl_.shard_group_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::ShardGroup* PROTOBUF_NULLABLE SidechainBlockHeader::unsafe_arena_release_shard_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.shard_group)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tari::rpc::ShardGroup* temp = _impl_.shard_group_;
  _impl_.shard_group_ = nullptr;
  return temp;
}
inline ::tari::rpc::ShardGroup* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_shard_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shard_group_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::ShardGroup>(GetArena());
    _impl_.shard_group_ = reinterpret_cast<::tari::rpc::ShardGroup*>(p);
  }
  return _impl_.shard_group_;
}
inline ::tari::rpc::ShardGroup* PROTOBUF_NONNULL SidechainBlockHeader::mutable_shard_group()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::tari::rpc::ShardGroup* _msg = _internal_mutable_shard_group();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.shard_group)
  return _msg;
}
inline void SidechainBlockHeader::set_allocated_shard_group(::tari::rpc::ShardGroup* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shard_group_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.shard_group_ = reinterpret_cast<::tari::rpc::ShardGroup*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.shard_group)
}

// bytes proposed_by = 7;
inline void SidechainBlockHeader::clear_proposed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposed_by_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& SidechainBlockHeader::proposed_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.proposed_by)
  return _internal_proposed_by();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_proposed_by(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.proposed_by_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.proposed_by)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_proposed_by()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_proposed_by();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.proposed_by)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_proposed_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposed_by_.Get();
}
inline void SidechainBlockHeader::_internal_set_proposed_by(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.proposed_by_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_proposed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.proposed_by_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_proposed_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.proposed_by)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.proposed_by_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.proposed_by_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_proposed_by(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.proposed_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposed_by_.IsDefault()) {
    _impl_.proposed_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.proposed_by)
}

// bytes state_merkle_root = 8;
inline void SidechainBlockHeader::clear_state_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_merkle_root_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& SidechainBlockHeader::state_merkle_root() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.state_merkle_root)
  return _internal_state_merkle_root();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_state_merkle_root(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_merkle_root_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.state_merkle_root)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_state_merkle_root()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_state_merkle_root();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.state_merkle_root)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_state_merkle_root() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_merkle_root_.Get();
}
inline void SidechainBlockHeader::_internal_set_state_merkle_root(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_merkle_root_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_state_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.state_merkle_root_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_state_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.state_merkle_root)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.state_merkle_root_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.state_merkle_root_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_state_merkle_root(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.state_merkle_root_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.state_merkle_root_.IsDefault()) {
    _impl_.state_merkle_root_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.state_merkle_root)
}

// bytes command_merkle_root = 9;
inline void SidechainBlockHeader::clear_command_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_merkle_root_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& SidechainBlockHeader::command_merkle_root() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.command_merkle_root)
  return _internal_command_merkle_root();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_command_merkle_root(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.command_merkle_root_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.command_merkle_root)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_command_merkle_root()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_command_merkle_root();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.command_merkle_root)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_command_merkle_root() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_merkle_root_.Get();
}
inline void SidechainBlockHeader::_internal_set_command_merkle_root(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.command_merkle_root_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_command_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.command_merkle_root_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_command_merkle_root() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.command_merkle_root)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.command_merkle_root_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.command_merkle_root_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_command_merkle_root(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.command_merkle_root_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.command_merkle_root_.IsDefault()) {
    _impl_.command_merkle_root_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.command_merkle_root)
}

// .tari.rpc.Signature signature = 11;
inline bool SidechainBlockHeader::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& SidechainBlockHeader::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& SidechainBlockHeader::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.signature)
  return _internal_signature();
}
inline void SidechainBlockHeader::unsafe_arena_set_allocated_signature(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.SidechainBlockHeader.signature)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE SidechainBlockHeader::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tari::rpc::Signature* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE SidechainBlockHeader::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.signature)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::tari::rpc::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.signature_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL SidechainBlockHeader::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::tari::rpc::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.signature)
  return _msg;
}
inline void SidechainBlockHeader::set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.signature)
}

// bytes metadata_hash = 10;
inline void SidechainBlockHeader::clear_metadata_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& SidechainBlockHeader::metadata_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.SidechainBlockHeader.metadata_hash)
  return _internal_metadata_hash();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SidechainBlockHeader::set_metadata_hash(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.metadata_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.SidechainBlockHeader.metadata_hash)
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::mutable_metadata_hash()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_metadata_hash();
  // @@protoc_insertion_point(field_mutable:tari.rpc.SidechainBlockHeader.metadata_hash)
  return _s;
}
inline const ::std::string& SidechainBlockHeader::_internal_metadata_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_hash_.Get();
}
inline void SidechainBlockHeader::_internal_set_metadata_hash(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.metadata_hash_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL SidechainBlockHeader::_internal_mutable_metadata_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.metadata_hash_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE SidechainBlockHeader::release_metadata_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.SidechainBlockHeader.metadata_hash)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.metadata_hash_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.metadata_hash_.Set("", GetArena());
  }
  return released;
}
inline void SidechainBlockHeader::set_allocated_metadata_hash(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.metadata_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_hash_.IsDefault()) {
    _impl_.metadata_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.SidechainBlockHeader.metadata_hash)
}

// -------------------------------------------------------------------

// ShardGroup

// uint32 start = 1;
inline void ShardGroup::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ShardGroup::start() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ShardGroup.start)
  return _internal_start();
}
inline void ShardGroup::set_start(::uint32_t value) {
  _internal_set_start(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tari.rpc.ShardGroup.start)
}
inline ::uint32_t ShardGroup::_internal_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_;
}
inline void ShardGroup::_internal_set_start(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_ = value;
}

// uint32 end_inclusive = 2;
inline void ShardGroup::clear_end_inclusive() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_inclusive_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ShardGroup::end_inclusive() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ShardGroup.end_inclusive)
  return _internal_end_inclusive();
}
inline void ShardGroup::set_end_inclusive(::uint32_t value) {
  _internal_set_end_inclusive(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tari.rpc.ShardGroup.end_inclusive)
}
inline ::uint32_t ShardGroup::_internal_end_inclusive() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_inclusive_;
}
inline void ShardGroup::_internal_set_end_inclusive(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_inclusive_ = value;
}

// -------------------------------------------------------------------

// EvictAtom

// bytes public_key = 1;
inline void EvictAtom::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& EvictAtom::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.EvictAtom.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void EvictAtom::set_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.EvictAtom.public_key)
}
inline ::std::string* PROTOBUF_NONNULL EvictAtom::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.EvictAtom.public_key)
  return _s;
}
inline const ::std::string& EvictAtom::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void EvictAtom::_internal_set_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL EvictAtom::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE EvictAtom::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.EvictAtom.public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_key_.Set("", GetArena());
  }
  return released;
}
inline void EvictAtom::set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.EvictAtom.public_key)
}

// -------------------------------------------------------------------

// QuorumCertificate

// bytes header_hash = 1;
inline void QuorumCertificate::clear_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& QuorumCertificate::header_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.QuorumCertificate.header_hash)
  return _internal_header_hash();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QuorumCertificate::set_header_hash(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.QuorumCertificate.header_hash)
}
inline ::std::string* PROTOBUF_NONNULL QuorumCertificate::mutable_header_hash()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_header_hash();
  // @@protoc_insertion_point(field_mutable:tari.rpc.QuorumCertificate.header_hash)
  return _s;
}
inline const ::std::string& QuorumCertificate::_internal_header_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_hash_.Get();
}
inline void QuorumCertificate::_internal_set_header_hash(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_hash_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QuorumCertificate::_internal_mutable_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.header_hash_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QuorumCertificate::release_header_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.QuorumCertificate.header_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.header_hash_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.header_hash_.Set("", GetArena());
  }
  return released;
}
inline void QuorumCertificate::set_allocated_header_hash(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.header_hash_.IsDefault()) {
    _impl_.header_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.QuorumCertificate.header_hash)
}

// bytes parent_id = 2;
inline void QuorumCertificate::clear_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& QuorumCertificate::parent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.QuorumCertificate.parent_id)
  return _internal_parent_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void QuorumCertificate::set_parent_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.parent_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.QuorumCertificate.parent_id)
}
inline ::std::string* PROTOBUF_NONNULL QuorumCertificate::mutable_parent_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:tari.rpc.QuorumCertificate.parent_id)
  return _s;
}
inline const ::std::string& QuorumCertificate::_internal_parent_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_id_.Get();
}
inline void QuorumCertificate::_internal_set_parent_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.parent_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL QuorumCertificate::_internal_mutable_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.parent_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE QuorumCertificate::release_parent_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.QuorumCertificate.parent_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.parent_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  return released;
}
inline void QuorumCertificate::set_allocated_parent_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.parent_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.parent_id_.IsDefault()) {
    _impl_.parent_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.QuorumCertificate.parent_id)
}

// repeated .tari.rpc.ValidatorSignature signatures = 3;
inline int QuorumCertificate::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int QuorumCertificate::signatures_size() const {
  return _internal_signatures_size();
}
inline void QuorumCertificate::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline ::tari::rpc::ValidatorSignature* PROTOBUF_NONNULL QuorumCertificate::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tari.rpc.QuorumCertificate.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>* PROTOBUF_NONNULL QuorumCertificate::mutable_signatures()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.QuorumCertificate.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::tari::rpc::ValidatorSignature& QuorumCertificate::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.QuorumCertificate.signatures)
  return _internal_signatures().Get(index);
}
inline ::tari::rpc::ValidatorSignature* PROTOBUF_NONNULL QuorumCertificate::add_signatures()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tari::rpc::ValidatorSignature* _add = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add:tari.rpc.QuorumCertificate.signatures)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>& QuorumCertificate::signatures() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tari.rpc.QuorumCertificate.signatures)
  return _internal_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>&
QuorumCertificate::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<::tari::rpc::ValidatorSignature>* PROTOBUF_NONNULL
QuorumCertificate::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// .tari.rpc.QuorumDecision decision = 4;
inline void QuorumCertificate::clear_decision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::tari::rpc::QuorumDecision QuorumCertificate::decision() const {
  // @@protoc_insertion_point(field_get:tari.rpc.QuorumCertificate.decision)
  return _internal_decision();
}
inline void QuorumCertificate::set_decision(::tari::rpc::QuorumDecision value) {
  _internal_set_decision(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tari.rpc.QuorumCertificate.decision)
}
inline ::tari::rpc::QuorumDecision QuorumCertificate::_internal_decision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tari::rpc::QuorumDecision>(_impl_.decision_);
}
inline void QuorumCertificate::_internal_set_decision(::tari::rpc::QuorumDecision value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.decision_ = value;
}

// -------------------------------------------------------------------

// ValidatorSignature

// bytes public_key = 1;
inline void ValidatorSignature::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ValidatorSignature::public_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorSignature.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ValidatorSignature::set_public_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tari.rpc.ValidatorSignature.public_key)
}
inline ::std::string* PROTOBUF_NONNULL ValidatorSignature::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorSignature.public_key)
  return _s;
}
inline const ::std::string& ValidatorSignature::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_key_.Get();
}
inline void ValidatorSignature::_internal_set_public_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.public_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ValidatorSignature::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.public_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ValidatorSignature::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorSignature.public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.public_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.public_key_.Set("", GetArena());
  }
  return released;
}
inline void ValidatorSignature::set_allocated_public_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorSignature.public_key)
}

// .tari.rpc.Signature signature = 2;
inline bool ValidatorSignature::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::tari::rpc::Signature& ValidatorSignature::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tari::rpc::Signature* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::tari::rpc::Signature&>(::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& ValidatorSignature::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tari.rpc.ValidatorSignature.signature)
  return _internal_signature();
}
inline void ValidatorSignature::unsafe_arena_set_allocated_signature(
    ::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.ValidatorSignature.signature)
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorSignature::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tari::rpc::Signature* PROTOBUF_NULLABLE ValidatorSignature::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tari.rpc.ValidatorSignature.signature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tari::rpc::Signature* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorSignature::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tari::rpc::Signature>(GetArena());
    _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(p);
  }
  return _impl_.signature_;
}
inline ::tari::rpc::Signature* PROTOBUF_NONNULL ValidatorSignature::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tari::rpc::Signature* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tari.rpc.ValidatorSignature.signature)
  return _msg;
}
inline void ValidatorSignature::set_allocated_signature(::tari::rpc::Signature* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signature_ = reinterpret_cast<::tari::rpc::Signature*>(value);
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ValidatorSignature.signature)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tari


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tari::rpc::QuorumDecision> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tari::rpc::QuorumDecision>() {
  return ::tari::rpc::QuorumDecision_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // sidechain_5ftypes_2eproto_2epb_2eh
