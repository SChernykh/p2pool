// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transaction.proto
// Protobuf C++ Version: 6.31.1

#include "transaction.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tari {
namespace rpc {

inline constexpr TransactionKernel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        excess_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        burn_commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        excess_sig_{nullptr},
        fee_{::uint64_t{0u}},
        lock_height_{::uint64_t{0u}},
        features_{0u},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionKernel::TransactionKernel(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TransactionKernel_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransactionKernelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionKernelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionKernelDefaultTypeInternal() {}
  union {
    TransactionKernel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionKernelDefaultTypeInternal _TransactionKernel_default_instance_;

inline constexpr OutputFeatures::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        coinbase_extra_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sidechain_feature_{nullptr},
        version_{0u},
        output_type_{0u},
        maturity_{::uint64_t{0u}},
        range_proof_type_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR OutputFeatures::OutputFeatures(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(OutputFeatures_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OutputFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputFeaturesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputFeaturesDefaultTypeInternal() {}
  union {
    OutputFeatures _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputFeaturesDefaultTypeInternal _OutputFeatures_default_instance_;

inline constexpr UnblindedOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        spending_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        input_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_private_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        metadata_signature_{nullptr},
        range_proof_{nullptr},
        value_{::uint64_t{0u}},
        script_lock_height_{::uint64_t{0u}},
        minimum_value_promise_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR UnblindedOutput::UnblindedOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UnblindedOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UnblindedOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnblindedOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnblindedOutputDefaultTypeInternal() {}
  union {
    UnblindedOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnblindedOutputDefaultTypeInternal _UnblindedOutput_default_instance_;

inline constexpr TransactionOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payment_reference_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        range_proof_{nullptr},
        metadata_signature_{nullptr},
        minimum_value_promise_{::uint64_t{0u}},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionOutput::TransactionOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TransactionOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransactionOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionOutputDefaultTypeInternal() {}
  union {
    TransactionOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;

inline constexpr TransactionInput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        input_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        output_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rangeproof_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        script_signature_{nullptr},
        metadata_signature_{nullptr},
        minimum_value_promise_{::uint64_t{0u}},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionInput::TransactionInput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TransactionInput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransactionInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionInputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionInputDefaultTypeInternal() {}
  union {
    TransactionInput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;

inline constexpr AggregateBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : inputs_{},
        outputs_{},
        kernels_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggregateBody::AggregateBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AggregateBody_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggregateBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateBodyDefaultTypeInternal() {}
  union {
    AggregateBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateBodyDefaultTypeInternal _AggregateBody_default_instance_;

inline constexpr Transaction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_offset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        body_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transaction::Transaction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Transaction_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace rpc
}  // namespace tari
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_transaction_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_transaction_2eproto = nullptr;
const ::uint32_t
    TableStruct_transaction_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_._has_bits_),
        11, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.fee_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.lock_height_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.excess_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.excess_sig_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.burn_commitment_),
        6,
        4,
        5,
        0,
        3,
        1,
        7,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_._has_bits_),
        17, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.commitment_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.input_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.script_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.output_hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.minimum_value_promise_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.rangeproof_hash_),
        9,
        0,
        1,
        2,
        3,
        10,
        4,
        5,
        6,
        13,
        7,
        12,
        11,
        8,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_._has_bits_),
        15, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.commitment_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.range_proof_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.minimum_value_promise_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.payment_reference_),
        7,
        0,
        8,
        1,
        2,
        3,
        9,
        4,
        11,
        5,
        10,
        6,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.output_type_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.maturity_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.coinbase_extra_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.sidechain_feature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.range_proof_type_),
        2,
        3,
        4,
        0,
        1,
        5,
        0x000, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.inputs_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.outputs_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.kernels_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.offset_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.script_offset_),
        0,
        2,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_._has_bits_),
        16, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.spending_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.input_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_private_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_lock_height_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.minimum_value_promise_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.range_proof_),
        10,
        0,
        7,
        1,
        2,
        3,
        4,
        8,
        11,
        5,
        6,
        12,
        9,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::tari::rpc::TransactionKernel)},
        {19, sizeof(::tari::rpc::TransactionInput)},
        {50, sizeof(::tari::rpc::TransactionOutput)},
        {77, sizeof(::tari::rpc::OutputFeatures)},
        {92, sizeof(::tari::rpc::AggregateBody)},
        {96, sizeof(::tari::rpc::Transaction)},
        {105, sizeof(::tari::rpc::UnblindedOutput)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::tari::rpc::_TransactionKernel_default_instance_._instance,
    &::tari::rpc::_TransactionInput_default_instance_._instance,
    &::tari::rpc::_TransactionOutput_default_instance_._instance,
    &::tari::rpc::_OutputFeatures_default_instance_._instance,
    &::tari::rpc::_AggregateBody_default_instance_._instance,
    &::tari::rpc::_Transaction_default_instance_._instance,
    &::tari::rpc::_UnblindedOutput_default_instance_._instance,
};
const char descriptor_table_protodef_transaction_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021transaction.proto\022\010tari.rpc\032\013types.pro"
    "to\032\025sidechain_types.proto\"\270\001\n\021Transactio"
    "nKernel\022\020\n\010features\030\001 \001(\r\022\013\n\003fee\030\002 \001(\004\022\023"
    "\n\013lock_height\030\003 \001(\004\022\016\n\006excess\030\006 \001(\014\022\'\n\ne"
    "xcess_sig\030\007 \001(\0132\023.tari.rpc.Signature\022\014\n\004"
    "hash\030\010 \001(\014\022\017\n\007version\030\t \001(\r\022\027\n\017burn_comm"
    "itment\030\n \001(\014\"\240\003\n\020TransactionInput\022*\n\010fea"
    "tures\030\001 \001(\0132\030.tari.rpc.OutputFeatures\022\022\n"
    "\ncommitment\030\002 \001(\014\022\014\n\004hash\030\003 \001(\014\022\016\n\006scrip"
    "t\030\004 \001(\014\022\022\n\ninput_data\030\005 \001(\014\0226\n\020script_si"
    "gnature\030\007 \001(\0132\034.tari.rpc.ComAndPubSignat"
    "ure\022 \n\030sender_offset_public_key\030\010 \001(\014\022\023\n"
    "\013output_hash\030\t \001(\014\022\020\n\010covenant\030\n \001(\014\022\017\n\007"
    "version\030\013 \001(\r\022\026\n\016encrypted_data\030\014 \001(\014\022\035\n"
    "\025minimum_value_promise\030\r \001(\004\0228\n\022metadata"
    "_signature\030\016 \001(\0132\034.tari.rpc.ComAndPubSig"
    "nature\022\027\n\017rangeproof_hash\030\017 \001(\014\"\355\002\n\021Tran"
    "sactionOutput\022*\n\010features\030\001 \001(\0132\030.tari.r"
    "pc.OutputFeatures\022\022\n\ncommitment\030\002 \001(\014\022)\n"
    "\013range_proof\030\003 \001(\0132\024.tari.rpc.RangeProof"
    "\022\014\n\004hash\030\004 \001(\014\022\016\n\006script\030\005 \001(\014\022 \n\030sender"
    "_offset_public_key\030\006 \001(\014\0228\n\022metadata_sig"
    "nature\030\007 \001(\0132\034.tari.rpc.ComAndPubSignatu"
    "re\022\020\n\010covenant\030\010 \001(\014\022\017\n\007version\030\t \001(\r\022\026\n"
    "\016encrypted_data\030\n \001(\014\022\035\n\025minimum_value_p"
    "romise\030\013 \001(\004\022\031\n\021payment_reference\030\014 \001(\014\""
    "\261\001\n\016OutputFeatures\022\017\n\007version\030\001 \001(\r\022\023\n\013o"
    "utput_type\030\002 \001(\r\022\020\n\010maturity\030\003 \001(\004\022\026\n\016co"
    "inbase_extra\030\004 \001(\014\0225\n\021sidechain_feature\030"
    "\005 \001(\0132\032.tari.rpc.SideChainFeature\022\030\n\020ran"
    "ge_proof_type\030\006 \001(\r\"\227\001\n\rAggregateBody\022*\n"
    "\006inputs\030\001 \003(\0132\032.tari.rpc.TransactionInpu"
    "t\022,\n\007outputs\030\002 \003(\0132\033.tari.rpc.Transactio"
    "nOutput\022,\n\007kernels\030\003 \003(\0132\033.tari.rpc.Tran"
    "sactionKernel\"[\n\013Transaction\022\016\n\006offset\030\001"
    " \001(\014\022%\n\004body\030\002 \001(\0132\027.tari.rpc.AggregateB"
    "ody\022\025\n\rscript_offset\030\003 \001(\014\"\216\003\n\017Unblinded"
    "Output\022\r\n\005value\030\001 \001(\004\022\024\n\014spending_key\030\002 "
    "\001(\014\022*\n\010features\030\003 \001(\0132\030.tari.rpc.OutputF"
    "eatures\022\016\n\006script\030\004 \001(\014\022\022\n\ninput_data\030\005 "
    "\001(\014\022\032\n\022script_private_key\030\007 \001(\014\022 \n\030sende"
    "r_offset_public_key\030\010 \001(\014\0228\n\022metadata_si"
    "gnature\030\t \001(\0132\034.tari.rpc.ComAndPubSignat"
    "ure\022\032\n\022script_lock_height\030\n \001(\004\022\020\n\010coven"
    "ant\030\013 \001(\014\022\026\n\016encrypted_data\030\014 \001(\014\022\035\n\025min"
    "imum_value_promise\030\r \001(\004\022)\n\013range_proof\030"
    "\016 \001(\0132\024.tari.rpc.RangeProofb\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_transaction_2eproto_deps[2] = {
        &::descriptor_table_sidechain_5ftypes_2eproto,
        &::descriptor_table_types_2eproto,
};
static ::absl::once_flag descriptor_table_transaction_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_transaction_2eproto = {
    false,
    false,
    1875,
    descriptor_table_protodef_transaction_2eproto,
    "transaction.proto",
    &descriptor_table_transaction_2eproto_once,
    descriptor_table_transaction_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_transaction_2eproto::offsets,
    file_level_enum_descriptors_transaction_2eproto,
    file_level_service_descriptors_transaction_2eproto,
};
namespace tari {
namespace rpc {
// ===================================================================

class TransactionKernel::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TransactionKernel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._has_bits_);
};

void TransactionKernel::clear_excess_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.excess_sig_ != nullptr) _impl_.excess_sig_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
TransactionKernel::TransactionKernel(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionKernel_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionKernel)
}
PROTOBUF_NDEBUG_INLINE TransactionKernel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::TransactionKernel& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        excess_(arena, from.excess_),
        hash_(arena, from.hash_),
        burn_commitment_(arena, from.burn_commitment_) {}

TransactionKernel::TransactionKernel(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TransactionKernel& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionKernel_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TransactionKernel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.excess_sig_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.excess_sig_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fee_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, fee_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, fee_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionKernel)
}
PROTOBUF_NDEBUG_INLINE TransactionKernel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        excess_(arena),
        hash_(arena),
        burn_commitment_(arena) {}

inline void TransactionKernel::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, excess_sig_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, excess_sig_) +
               sizeof(Impl_::version_));
}
TransactionKernel::~TransactionKernel() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionKernel)
  SharedDtor(*this);
}
inline void TransactionKernel::SharedDtor(MessageLite& self) {
  TransactionKernel& this_ = static_cast<TransactionKernel&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.excess_.Destroy();
  this_._impl_.hash_.Destroy();
  this_._impl_.burn_commitment_.Destroy();
  delete this_._impl_.excess_sig_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TransactionKernel::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TransactionKernel(arena);
}
constexpr auto TransactionKernel::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TransactionKernel),
                                            alignof(TransactionKernel));
}
constexpr auto TransactionKernel::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TransactionKernel_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TransactionKernel::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TransactionKernel>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TransactionKernel::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TransactionKernel>(), &TransactionKernel::ByteSizeLong,
              &TransactionKernel::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._cached_size_),
          false,
      },
      &TransactionKernel::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TransactionKernel_class_data_ =
        TransactionKernel::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TransactionKernel::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TransactionKernel_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TransactionKernel_class_data_.tc_table);
  return TransactionKernel_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 1, 0, 2>
TransactionKernel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966296,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TransactionKernel_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionKernel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 features = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionKernel, _impl_.features_), 6>(),
     {8, 6, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.features_)}},
    // uint64 fee = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionKernel, _impl_.fee_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.fee_)}},
    // uint64 lock_height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionKernel, _impl_.lock_height_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.lock_height_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes excess = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_)}},
    // .tari.rpc.Signature excess_sig = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_)}},
    // bytes hash = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 1, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.hash_)}},
    // uint32 version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionKernel, _impl_.version_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_)}},
    // bytes burn_commitment = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.burn_commitment_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.features_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 fee = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.fee_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 lock_height = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.lock_height_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes excess = 6;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.Signature excess_sig = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes hash = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.hash_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bytes burn_commitment = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.burn_commitment_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::Signature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TransactionKernel::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionKernel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.excess_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.hash_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.burn_commitment_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.excess_sig_ != nullptr);
      _impl_.excess_sig_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.fee_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.fee_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TransactionKernel::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TransactionKernel& this_ = static_cast<const TransactionKernel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TransactionKernel::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TransactionKernel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionKernel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 features = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_features() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_features(), target);
    }
  }

  // uint64 fee = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_fee() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this_._internal_fee(), target);
    }
  }

  // uint64 lock_height = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_lock_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_lock_height(), target);
    }
  }

  // bytes excess = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_excess().empty()) {
      const ::std::string& _s = this_._internal_excess();
      target = stream->WriteBytesMaybeAliased(6, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.Signature excess_sig = 7;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.excess_sig_, this_._impl_.excess_sig_->GetCachedSize(), target,
        stream);
  }

  // bytes hash = 8;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_hash().empty()) {
      const ::std::string& _s = this_._internal_hash();
      target = stream->WriteBytesMaybeAliased(8, _s, target);
    }
  }

  // uint32 version = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_version(), target);
    }
  }

  // bytes burn_commitment = 10;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_burn_commitment().empty()) {
      const ::std::string& _s = this_._internal_burn_commitment();
      target = stream->WriteBytesMaybeAliased(10, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionKernel)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TransactionKernel::ByteSizeLong(const MessageLite& base) {
  const TransactionKernel& this_ = static_cast<const TransactionKernel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TransactionKernel::ByteSizeLong() const {
  const TransactionKernel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionKernel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // bytes excess = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_excess().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_excess());
      }
    }
    // bytes hash = 8;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_hash().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_hash());
      }
    }
    // bytes burn_commitment = 10;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_burn_commitment().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_burn_commitment());
      }
    }
    // .tari.rpc.Signature excess_sig = 7;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.excess_sig_);
    }
    // uint64 fee = 2;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_fee() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_fee());
      }
    }
    // uint64 lock_height = 3;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_lock_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_lock_height());
      }
    }
    // uint32 features = 1;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_features() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_features());
      }
    }
    // uint32 version = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TransactionKernel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionKernel*>(&to_msg);
  auto& from = static_cast<const TransactionKernel&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionKernel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_excess().empty()) {
        _this->_internal_set_excess(from._internal_excess());
      } else {
        if (_this->_impl_.excess_.IsDefault()) {
          _this->_internal_set_excess("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_hash().empty()) {
        _this->_internal_set_hash(from._internal_hash());
      } else {
        if (_this->_impl_.hash_.IsDefault()) {
          _this->_internal_set_hash("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_burn_commitment().empty()) {
        _this->_internal_set_burn_commitment(from._internal_burn_commitment());
      } else {
        if (_this->_impl_.burn_commitment_.IsDefault()) {
          _this->_internal_set_burn_commitment("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.excess_sig_ != nullptr);
      if (_this->_impl_.excess_sig_ == nullptr) {
        _this->_impl_.excess_sig_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.excess_sig_);
      } else {
        _this->_impl_.excess_sig_->MergeFrom(*from._impl_.excess_sig_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_fee() != 0) {
        _this->_impl_.fee_ = from._impl_.fee_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_lock_height() != 0) {
        _this->_impl_.lock_height_ = from._impl_.lock_height_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_features() != 0) {
        _this->_impl_.features_ = from._impl_.features_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionKernel::CopyFrom(const TransactionKernel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionKernel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TransactionKernel::InternalSwap(TransactionKernel* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.excess_, &other->_impl_.excess_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.burn_commitment_, &other->_impl_.burn_commitment_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_)
      + sizeof(TransactionKernel::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_)>(
          reinterpret_cast<char*>(&_impl_.excess_sig_),
          reinterpret_cast<char*>(&other->_impl_.excess_sig_));
}

::google::protobuf::Metadata TransactionKernel::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TransactionInput::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TransactionInput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._has_bits_);
};

void TransactionInput::clear_script_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.script_signature_ != nullptr) _impl_.script_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TransactionInput::clear_metadata_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
TransactionInput::TransactionInput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionInput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionInput)
}
PROTOBUF_NDEBUG_INLINE TransactionInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::TransactionInput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        commitment_(arena, from.commitment_),
        hash_(arena, from.hash_),
        script_(arena, from.script_),
        input_data_(arena, from.input_data_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        output_hash_(arena, from.output_hash_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_),
        rangeproof_hash_(arena, from.rangeproof_hash_) {}

TransactionInput::TransactionInput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TransactionInput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionInput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TransactionInput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_)
                : nullptr;
  _impl_.script_signature_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.script_signature_)
                : nullptr;
  _impl_.metadata_signature_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_value_promise_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, minimum_value_promise_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, minimum_value_promise_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionInput)
}
PROTOBUF_NDEBUG_INLINE TransactionInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        commitment_(arena),
        hash_(arena),
        script_(arena),
        input_data_(arena),
        sender_offset_public_key_(arena),
        output_hash_(arena),
        covenant_(arena),
        encrypted_data_(arena),
        rangeproof_hash_(arena) {}

inline void TransactionInput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::version_));
}
TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionInput)
  SharedDtor(*this);
}
inline void TransactionInput::SharedDtor(MessageLite& self) {
  TransactionInput& this_ = static_cast<TransactionInput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.commitment_.Destroy();
  this_._impl_.hash_.Destroy();
  this_._impl_.script_.Destroy();
  this_._impl_.input_data_.Destroy();
  this_._impl_.sender_offset_public_key_.Destroy();
  this_._impl_.output_hash_.Destroy();
  this_._impl_.covenant_.Destroy();
  this_._impl_.encrypted_data_.Destroy();
  this_._impl_.rangeproof_hash_.Destroy();
  delete this_._impl_.features_;
  delete this_._impl_.script_signature_;
  delete this_._impl_.metadata_signature_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TransactionInput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TransactionInput(arena);
}
constexpr auto TransactionInput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TransactionInput),
                                            alignof(TransactionInput));
}
constexpr auto TransactionInput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TransactionInput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TransactionInput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TransactionInput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TransactionInput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TransactionInput>(), &TransactionInput::ByteSizeLong,
              &TransactionInput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._cached_size_),
          false,
      },
      &TransactionInput::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TransactionInput_class_data_ =
        TransactionInput::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TransactionInput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TransactionInput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TransactionInput_class_data_.tc_table);
  return TransactionInput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 0, 2>
TransactionInput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934560,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TransactionInput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionInput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.OutputFeatures features = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 9, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_)}},
    // bytes commitment = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.commitment_)}},
    // bytes hash = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.hash_)}},
    // bytes script = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_)}},
    // bytes input_data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.input_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.ComAndPubSignature script_signature = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 10, 1, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_signature_)}},
    // bytes sender_offset_public_key = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.sender_offset_public_key_)}},
    // bytes output_hash = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 5, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.output_hash_)}},
    // bytes covenant = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 6, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.covenant_)}},
    // uint32 version = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionInput, _impl_.version_), 13>(),
     {88, 13, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_)}},
    // bytes encrypted_data = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 7, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionInput, _impl_.minimum_value_promise_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.minimum_value_promise_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 11, 2, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.metadata_signature_)}},
    // bytes rangeproof_hash = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 8, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.rangeproof_hash_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tari.rpc.OutputFeatures features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes commitment = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.commitment_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes hash = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.hash_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script = 4;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes input_data = 5;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.input_data_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature script_signature = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_signature_), _Internal::kHasBitsOffset + 10, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes sender_offset_public_key = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.sender_offset_public_key_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes output_hash = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.output_hash_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes covenant = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.covenant_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 11;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bytes encrypted_data = 12;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.encrypted_data_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 13;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.minimum_value_promise_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 11, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes rangeproof_hash = 15;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.rangeproof_hash_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionInput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.commitment_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.hash_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.script_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.input_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.sender_offset_public_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.output_hash_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.covenant_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.encrypted_data_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _impl_.rangeproof_hash_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.script_signature_ != nullptr);
      _impl_.script_signature_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
  }
  if ((cached_has_bits & 0x00003000u) != 0) {
    ::memset(&_impl_.minimum_value_promise_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.minimum_value_promise_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TransactionInput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TransactionInput& this_ = static_cast<const TransactionInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TransactionInput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TransactionInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionInput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 1;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.features_, this_._impl_.features_->GetCachedSize(), target,
        stream);
  }

  // bytes commitment = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_commitment().empty()) {
      const ::std::string& _s = this_._internal_commitment();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // bytes hash = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_hash().empty()) {
      const ::std::string& _s = this_._internal_hash();
      target = stream->WriteBytesMaybeAliased(3, _s, target);
    }
  }

  // bytes script = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_script().empty()) {
      const ::std::string& _s = this_._internal_script();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
    }
  }

  // bytes input_data = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (!this_._internal_input_data().empty()) {
      const ::std::string& _s = this_._internal_input_data();
      target = stream->WriteBytesMaybeAliased(5, _s, target);
    }
  }

  // .tari.rpc.ComAndPubSignature script_signature = 7;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.script_signature_, this_._impl_.script_signature_->GetCachedSize(), target,
        stream);
  }

  // bytes sender_offset_public_key = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_sender_offset_public_key().empty()) {
      const ::std::string& _s = this_._internal_sender_offset_public_key();
      target = stream->WriteBytesMaybeAliased(8, _s, target);
    }
  }

  // bytes output_hash = 9;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_output_hash().empty()) {
      const ::std::string& _s = this_._internal_output_hash();
      target = stream->WriteBytesMaybeAliased(9, _s, target);
    }
  }

  // bytes covenant = 10;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (!this_._internal_covenant().empty()) {
      const ::std::string& _s = this_._internal_covenant();
      target = stream->WriteBytesMaybeAliased(10, _s, target);
    }
  }

  // uint32 version = 11;
  if ((cached_has_bits & 0x00002000u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_version(), target);
    }
  }

  // bytes encrypted_data = 12;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (!this_._internal_encrypted_data().empty()) {
      const ::std::string& _s = this_._internal_encrypted_data();
      target = stream->WriteBytesMaybeAliased(12, _s, target);
    }
  }

  // uint64 minimum_value_promise = 13;
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_minimum_value_promise() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          13, this_._internal_minimum_value_promise(), target);
    }
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 14;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.metadata_signature_, this_._impl_.metadata_signature_->GetCachedSize(), target,
        stream);
  }

  // bytes rangeproof_hash = 15;
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (!this_._internal_rangeproof_hash().empty()) {
      const ::std::string& _s = this_._internal_rangeproof_hash();
      target = stream->WriteBytesMaybeAliased(15, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionInput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TransactionInput::ByteSizeLong(const MessageLite& base) {
  const TransactionInput& this_ = static_cast<const TransactionInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TransactionInput::ByteSizeLong() const {
  const TransactionInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionInput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // bytes commitment = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_commitment().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_commitment());
      }
    }
    // bytes hash = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_hash().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_hash());
      }
    }
    // bytes script = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_script().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_script());
      }
    }
    // bytes input_data = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_input_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_input_data());
      }
    }
    // bytes sender_offset_public_key = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_sender_offset_public_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_sender_offset_public_key());
      }
    }
    // bytes output_hash = 9;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_output_hash().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_output_hash());
      }
    }
    // bytes covenant = 10;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_covenant().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_covenant());
      }
    }
    // bytes encrypted_data = 12;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!this_._internal_encrypted_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_encrypted_data());
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    // bytes rangeproof_hash = 15;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!this_._internal_rangeproof_hash().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_rangeproof_hash());
      }
    }
    // .tari.rpc.OutputFeatures features = 1;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.features_);
    }
    // .tari.rpc.ComAndPubSignature script_signature = 7;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.script_signature_);
    }
    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_signature_);
    }
    // uint64 minimum_value_promise = 13;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_minimum_value_promise() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_minimum_value_promise());
      }
    }
    // uint32 version = 11;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TransactionInput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionInput*>(&to_msg);
  auto& from = static_cast<const TransactionInput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionInput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_commitment().empty()) {
        _this->_internal_set_commitment(from._internal_commitment());
      } else {
        if (_this->_impl_.commitment_.IsDefault()) {
          _this->_internal_set_commitment("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_hash().empty()) {
        _this->_internal_set_hash(from._internal_hash());
      } else {
        if (_this->_impl_.hash_.IsDefault()) {
          _this->_internal_set_hash("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_script().empty()) {
        _this->_internal_set_script(from._internal_script());
      } else {
        if (_this->_impl_.script_.IsDefault()) {
          _this->_internal_set_script("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_input_data().empty()) {
        _this->_internal_set_input_data(from._internal_input_data());
      } else {
        if (_this->_impl_.input_data_.IsDefault()) {
          _this->_internal_set_input_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_sender_offset_public_key().empty()) {
        _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
      } else {
        if (_this->_impl_.sender_offset_public_key_.IsDefault()) {
          _this->_internal_set_sender_offset_public_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_output_hash().empty()) {
        _this->_internal_set_output_hash(from._internal_output_hash());
      } else {
        if (_this->_impl_.output_hash_.IsDefault()) {
          _this->_internal_set_output_hash("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_covenant().empty()) {
        _this->_internal_set_covenant(from._internal_covenant());
      } else {
        if (_this->_impl_.covenant_.IsDefault()) {
          _this->_internal_set_covenant("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!from._internal_encrypted_data().empty()) {
        _this->_internal_set_encrypted_data(from._internal_encrypted_data());
      } else {
        if (_this->_impl_.encrypted_data_.IsDefault()) {
          _this->_internal_set_encrypted_data("");
        }
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!from._internal_rangeproof_hash().empty()) {
        _this->_internal_set_rangeproof_hash(from._internal_rangeproof_hash());
      } else {
        if (_this->_impl_.rangeproof_hash_.IsDefault()) {
          _this->_internal_set_rangeproof_hash("");
        }
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.script_signature_ != nullptr);
      if (_this->_impl_.script_signature_ == nullptr) {
        _this->_impl_.script_signature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.script_signature_);
      } else {
        _this->_impl_.script_signature_->MergeFrom(*from._impl_.script_signature_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_minimum_value_promise() != 0) {
        _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TransactionInput::InternalSwap(TransactionInput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, &other->_impl_.commitment_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_data_, &other->_impl_.input_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_hash_, &other->_impl_.output_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rangeproof_hash_, &other->_impl_.rangeproof_hash_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_)
      + sizeof(TransactionInput::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata TransactionInput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TransactionOutput::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<TransactionOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._has_bits_);
};

void TransactionOutput::clear_range_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.range_proof_ != nullptr) _impl_.range_proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TransactionOutput::clear_metadata_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
TransactionOutput::TransactionOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionOutput)
}
PROTOBUF_NDEBUG_INLINE TransactionOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::TransactionOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        commitment_(arena, from.commitment_),
        hash_(arena, from.hash_),
        script_(arena, from.script_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_),
        payment_reference_(arena, from.payment_reference_) {}

TransactionOutput::TransactionOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TransactionOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TransactionOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TransactionOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_)
                : nullptr;
  _impl_.range_proof_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.range_proof_)
                : nullptr;
  _impl_.metadata_signature_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_value_promise_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, minimum_value_promise_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, minimum_value_promise_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionOutput)
}
PROTOBUF_NDEBUG_INLINE TransactionOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        commitment_(arena),
        hash_(arena),
        script_(arena),
        sender_offset_public_key_(arena),
        covenant_(arena),
        encrypted_data_(arena),
        payment_reference_(arena) {}

inline void TransactionOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::version_));
}
TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionOutput)
  SharedDtor(*this);
}
inline void TransactionOutput::SharedDtor(MessageLite& self) {
  TransactionOutput& this_ = static_cast<TransactionOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.commitment_.Destroy();
  this_._impl_.hash_.Destroy();
  this_._impl_.script_.Destroy();
  this_._impl_.sender_offset_public_key_.Destroy();
  this_._impl_.covenant_.Destroy();
  this_._impl_.encrypted_data_.Destroy();
  this_._impl_.payment_reference_.Destroy();
  delete this_._impl_.features_;
  delete this_._impl_.range_proof_;
  delete this_._impl_.metadata_signature_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TransactionOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TransactionOutput(arena);
}
constexpr auto TransactionOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TransactionOutput),
                                            alignof(TransactionOutput));
}
constexpr auto TransactionOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TransactionOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TransactionOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TransactionOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TransactionOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TransactionOutput>(), &TransactionOutput::ByteSizeLong,
              &TransactionOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._cached_size_),
          false,
      },
      &TransactionOutput::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull TransactionOutput_class_data_ =
        TransactionOutput::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TransactionOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TransactionOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TransactionOutput_class_data_.tc_table);
  return TransactionOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 0, 2>
TransactionOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TransactionOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.OutputFeatures features = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 7, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_)}},
    // bytes commitment = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.commitment_)}},
    // .tari.rpc.RangeProof range_proof = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 8, 1, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.range_proof_)}},
    // bytes hash = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.hash_)}},
    // bytes script = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.script_)}},
    // bytes sender_offset_public_key = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.sender_offset_public_key_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 9, 2, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.metadata_signature_)}},
    // bytes covenant = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.covenant_)}},
    // uint32 version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionOutput, _impl_.version_), 11>(),
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_)}},
    // bytes encrypted_data = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 5, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionOutput, _impl_.minimum_value_promise_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.minimum_value_promise_)}},
    // bytes payment_reference = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 6, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.payment_reference_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tari.rpc.OutputFeatures features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes commitment = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.commitment_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.RangeProof range_proof = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.range_proof_), _Internal::kHasBitsOffset + 8, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes hash = 4;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.hash_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script = 5;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.script_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sender_offset_public_key = 6;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.sender_offset_public_key_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 9, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes covenant = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.covenant_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bytes encrypted_data = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.encrypted_data_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 11;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.minimum_value_promise_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes payment_reference = 12;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.payment_reference_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::RangeProof>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.commitment_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.hash_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.script_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.sender_offset_public_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.covenant_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.encrypted_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.payment_reference_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.range_proof_ != nullptr);
      _impl_.range_proof_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000c00u) != 0) {
    ::memset(&_impl_.minimum_value_promise_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.minimum_value_promise_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TransactionOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TransactionOutput& this_ = static_cast<const TransactionOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TransactionOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TransactionOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 1;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.features_, this_._impl_.features_->GetCachedSize(), target,
        stream);
  }

  // bytes commitment = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_commitment().empty()) {
      const ::std::string& _s = this_._internal_commitment();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // .tari.rpc.RangeProof range_proof = 3;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.range_proof_, this_._impl_.range_proof_->GetCachedSize(), target,
        stream);
  }

  // bytes hash = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_hash().empty()) {
      const ::std::string& _s = this_._internal_hash();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
    }
  }

  // bytes script = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_script().empty()) {
      const ::std::string& _s = this_._internal_script();
      target = stream->WriteBytesMaybeAliased(5, _s, target);
    }
  }

  // bytes sender_offset_public_key = 6;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (!this_._internal_sender_offset_public_key().empty()) {
      const ::std::string& _s = this_._internal_sender_offset_public_key();
      target = stream->WriteBytesMaybeAliased(6, _s, target);
    }
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 7;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.metadata_signature_, this_._impl_.metadata_signature_->GetCachedSize(), target,
        stream);
  }

  // bytes covenant = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_covenant().empty()) {
      const ::std::string& _s = this_._internal_covenant();
      target = stream->WriteBytesMaybeAliased(8, _s, target);
    }
  }

  // uint32 version = 9;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_version(), target);
    }
  }

  // bytes encrypted_data = 10;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_encrypted_data().empty()) {
      const ::std::string& _s = this_._internal_encrypted_data();
      target = stream->WriteBytesMaybeAliased(10, _s, target);
    }
  }

  // uint64 minimum_value_promise = 11;
  if ((cached_has_bits & 0x00000400u) != 0) {
    if (this_._internal_minimum_value_promise() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          11, this_._internal_minimum_value_promise(), target);
    }
  }

  // bytes payment_reference = 12;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (!this_._internal_payment_reference().empty()) {
      const ::std::string& _s = this_._internal_payment_reference();
      target = stream->WriteBytesMaybeAliased(12, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TransactionOutput::ByteSizeLong(const MessageLite& base) {
  const TransactionOutput& this_ = static_cast<const TransactionOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TransactionOutput::ByteSizeLong() const {
  const TransactionOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // bytes commitment = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_commitment().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_commitment());
      }
    }
    // bytes hash = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_hash().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_hash());
      }
    }
    // bytes script = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_script().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_script());
      }
    }
    // bytes sender_offset_public_key = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_sender_offset_public_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_sender_offset_public_key());
      }
    }
    // bytes covenant = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_covenant().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_covenant());
      }
    }
    // bytes encrypted_data = 10;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_encrypted_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_encrypted_data());
      }
    }
    // bytes payment_reference = 12;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_payment_reference().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_payment_reference());
      }
    }
    // .tari.rpc.OutputFeatures features = 1;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.features_);
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    // .tari.rpc.RangeProof range_proof = 3;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.range_proof_);
    }
    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_signature_);
    }
    // uint64 minimum_value_promise = 11;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_minimum_value_promise() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_minimum_value_promise());
      }
    }
    // uint32 version = 9;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TransactionOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionOutput*>(&to_msg);
  auto& from = static_cast<const TransactionOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_commitment().empty()) {
        _this->_internal_set_commitment(from._internal_commitment());
      } else {
        if (_this->_impl_.commitment_.IsDefault()) {
          _this->_internal_set_commitment("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_hash().empty()) {
        _this->_internal_set_hash(from._internal_hash());
      } else {
        if (_this->_impl_.hash_.IsDefault()) {
          _this->_internal_set_hash("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_script().empty()) {
        _this->_internal_set_script(from._internal_script());
      } else {
        if (_this->_impl_.script_.IsDefault()) {
          _this->_internal_set_script("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_sender_offset_public_key().empty()) {
        _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
      } else {
        if (_this->_impl_.sender_offset_public_key_.IsDefault()) {
          _this->_internal_set_sender_offset_public_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_covenant().empty()) {
        _this->_internal_set_covenant(from._internal_covenant());
      } else {
        if (_this->_impl_.covenant_.IsDefault()) {
          _this->_internal_set_covenant("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_encrypted_data().empty()) {
        _this->_internal_set_encrypted_data(from._internal_encrypted_data());
      } else {
        if (_this->_impl_.encrypted_data_.IsDefault()) {
          _this->_internal_set_encrypted_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_payment_reference().empty()) {
        _this->_internal_set_payment_reference(from._internal_payment_reference());
      } else {
        if (_this->_impl_.payment_reference_.IsDefault()) {
          _this->_internal_set_payment_reference("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.range_proof_ != nullptr);
      if (_this->_impl_.range_proof_ == nullptr) {
        _this->_impl_.range_proof_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.range_proof_);
      } else {
        _this->_impl_.range_proof_->MergeFrom(*from._impl_.range_proof_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_minimum_value_promise() != 0) {
        _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TransactionOutput::InternalSwap(TransactionOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, &other->_impl_.commitment_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payment_reference_, &other->_impl_.payment_reference_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_)
      + sizeof(TransactionOutput::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata TransactionOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OutputFeatures::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<OutputFeatures>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._has_bits_);
};

void OutputFeatures::clear_sidechain_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sidechain_feature_ != nullptr) _impl_.sidechain_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OutputFeatures::OutputFeatures(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, OutputFeatures_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.OutputFeatures)
}
PROTOBUF_NDEBUG_INLINE OutputFeatures::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::OutputFeatures& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        coinbase_extra_(arena, from.coinbase_extra_) {}

OutputFeatures::OutputFeatures(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const OutputFeatures& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, OutputFeatures_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OutputFeatures* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sidechain_feature_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sidechain_feature_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, version_),
           offsetof(Impl_, range_proof_type_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::range_proof_type_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.OutputFeatures)
}
PROTOBUF_NDEBUG_INLINE OutputFeatures::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        coinbase_extra_(arena) {}

inline void OutputFeatures::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sidechain_feature_),
           0,
           offsetof(Impl_, range_proof_type_) -
               offsetof(Impl_, sidechain_feature_) +
               sizeof(Impl_::range_proof_type_));
}
OutputFeatures::~OutputFeatures() {
  // @@protoc_insertion_point(destructor:tari.rpc.OutputFeatures)
  SharedDtor(*this);
}
inline void OutputFeatures::SharedDtor(MessageLite& self) {
  OutputFeatures& this_ = static_cast<OutputFeatures&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.coinbase_extra_.Destroy();
  delete this_._impl_.sidechain_feature_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL OutputFeatures::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) OutputFeatures(arena);
}
constexpr auto OutputFeatures::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(OutputFeatures),
                                            alignof(OutputFeatures));
}
constexpr auto OutputFeatures::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_OutputFeatures_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &OutputFeatures::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<OutputFeatures>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &OutputFeatures::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<OutputFeatures>(), &OutputFeatures::ByteSizeLong,
              &OutputFeatures::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._cached_size_),
          false,
      },
      &OutputFeatures::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull OutputFeatures_class_data_ =
        OutputFeatures::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
OutputFeatures::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&OutputFeatures_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(OutputFeatures_class_data_.tc_table);
  return OutputFeatures_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2>
OutputFeatures::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    OutputFeatures_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.version_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.version_)}},
    // uint32 output_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.output_type_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.output_type_)}},
    // uint64 maturity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutputFeatures, _impl_.maturity_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.maturity_)}},
    // bytes coinbase_extra = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.coinbase_extra_)}},
    // .tari.rpc.SideChainFeature sidechain_feature = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_)}},
    // uint32 range_proof_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.range_proof_type_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 version = 1;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 output_type = 2;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.output_type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 maturity = 3;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.maturity_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes coinbase_extra = 4;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.coinbase_extra_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.SideChainFeature sidechain_feature = 5;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 range_proof_type = 6;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::SideChainFeature>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void OutputFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.OutputFeatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.coinbase_extra_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.sidechain_feature_ != nullptr);
      _impl_.sidechain_feature_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.range_proof_type_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.range_proof_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL OutputFeatures::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const OutputFeatures& this_ = static_cast<const OutputFeatures&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL OutputFeatures::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const OutputFeatures& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.OutputFeatures)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 version = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_version(), target);
    }
  }

  // uint32 output_type = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_output_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_output_type(), target);
    }
  }

  // uint64 maturity = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_maturity() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_maturity(), target);
    }
  }

  // bytes coinbase_extra = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_coinbase_extra().empty()) {
      const ::std::string& _s = this_._internal_coinbase_extra();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.SideChainFeature sidechain_feature = 5;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.sidechain_feature_, this_._impl_.sidechain_feature_->GetCachedSize(), target,
        stream);
  }

  // uint32 range_proof_type = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_range_proof_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_range_proof_type(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.OutputFeatures)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t OutputFeatures::ByteSizeLong(const MessageLite& base) {
  const OutputFeatures& this_ = static_cast<const OutputFeatures&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t OutputFeatures::ByteSizeLong() const {
  const OutputFeatures& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.OutputFeatures)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // bytes coinbase_extra = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_coinbase_extra().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_coinbase_extra());
      }
    }
    // .tari.rpc.SideChainFeature sidechain_feature = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sidechain_feature_);
    }
    // uint32 version = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
    // uint32 output_type = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_output_type() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_output_type());
      }
    }
    // uint64 maturity = 3;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_maturity() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_maturity());
      }
    }
    // uint32 range_proof_type = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_range_proof_type() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_range_proof_type());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void OutputFeatures::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OutputFeatures*>(&to_msg);
  auto& from = static_cast<const OutputFeatures&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.OutputFeatures)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_coinbase_extra().empty()) {
        _this->_internal_set_coinbase_extra(from._internal_coinbase_extra());
      } else {
        if (_this->_impl_.coinbase_extra_.IsDefault()) {
          _this->_internal_set_coinbase_extra("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.sidechain_feature_ != nullptr);
      if (_this->_impl_.sidechain_feature_ == nullptr) {
        _this->_impl_.sidechain_feature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sidechain_feature_);
      } else {
        _this->_impl_.sidechain_feature_->MergeFrom(*from._impl_.sidechain_feature_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_output_type() != 0) {
        _this->_impl_.output_type_ = from._impl_.output_type_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_maturity() != 0) {
        _this->_impl_.maturity_ = from._impl_.maturity_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_range_proof_type() != 0) {
        _this->_impl_.range_proof_type_ = from._impl_.range_proof_type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OutputFeatures::CopyFrom(const OutputFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.OutputFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OutputFeatures::InternalSwap(OutputFeatures* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coinbase_extra_, &other->_impl_.coinbase_extra_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_)
      + sizeof(OutputFeatures::_impl_.range_proof_type_)
      - PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_)>(
          reinterpret_cast<char*>(&_impl_.sidechain_feature_),
          reinterpret_cast<char*>(&other->_impl_.sidechain_feature_));
}

::google::protobuf::Metadata OutputFeatures::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggregateBody::_Internal {
 public:
};

AggregateBody::AggregateBody(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AggregateBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.AggregateBody)
}
PROTOBUF_NDEBUG_INLINE AggregateBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::AggregateBody& from_msg)
      : inputs_{visibility, arena, from.inputs_},
        outputs_{visibility, arena, from.outputs_},
        kernels_{visibility, arena, from.kernels_},
        _cached_size_{0} {}

AggregateBody::AggregateBody(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AggregateBody& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AggregateBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggregateBody* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tari.rpc.AggregateBody)
}
PROTOBUF_NDEBUG_INLINE AggregateBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : inputs_{visibility, arena},
        outputs_{visibility, arena},
        kernels_{visibility, arena},
        _cached_size_{0} {}

inline void AggregateBody::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggregateBody::~AggregateBody() {
  // @@protoc_insertion_point(destructor:tari.rpc.AggregateBody)
  SharedDtor(*this);
}
inline void AggregateBody::SharedDtor(MessageLite& self) {
  AggregateBody& this_ = static_cast<AggregateBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AggregateBody::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AggregateBody(arena);
}
constexpr auto AggregateBody::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.inputs_) +
          decltype(AggregateBody::_impl_.inputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.outputs_) +
          decltype(AggregateBody::_impl_.outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.kernels_) +
          decltype(AggregateBody::_impl_.kernels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AggregateBody), alignof(AggregateBody), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AggregateBody::PlacementNew_,
                                 sizeof(AggregateBody),
                                 alignof(AggregateBody));
  }
}
constexpr auto AggregateBody::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AggregateBody_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AggregateBody::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AggregateBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AggregateBody::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AggregateBody>(), &AggregateBody::ByteSizeLong,
              &AggregateBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_._cached_size_),
          false,
      },
      &AggregateBody::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AggregateBody_class_data_ =
        AggregateBody::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AggregateBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AggregateBody_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AggregateBody_class_data_.tc_table);
  return AggregateBody_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
AggregateBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AggregateBody_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::AggregateBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .tari.rpc.TransactionInput inputs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.inputs_)}},
    // repeated .tari.rpc.TransactionOutput outputs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.outputs_)}},
    // repeated .tari.rpc.TransactionKernel kernels = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.kernels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tari.rpc.TransactionInput inputs = 1;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.inputs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tari.rpc.TransactionOutput outputs = 2;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.outputs_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tari.rpc.TransactionKernel kernels = 3;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.kernels_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::TransactionInput>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::TransactionOutput>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::TransactionKernel>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AggregateBody::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.AggregateBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.outputs_.Clear();
  _impl_.kernels_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AggregateBody::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AggregateBody& this_ = static_cast<const AggregateBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AggregateBody::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AggregateBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.AggregateBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tari.rpc.TransactionInput inputs = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_inputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_inputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .tari.rpc.TransactionOutput outputs = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .tari.rpc.TransactionKernel kernels = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_kernels_size());
       i < n; i++) {
    const auto& repfield = this_._internal_kernels().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.AggregateBody)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AggregateBody::ByteSizeLong(const MessageLite& base) {
  const AggregateBody& this_ = static_cast<const AggregateBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AggregateBody::ByteSizeLong() const {
  const AggregateBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.AggregateBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .tari.rpc.TransactionInput inputs = 1;
    {
      total_size += 1UL * this_._internal_inputs_size();
      for (const auto& msg : this_._internal_inputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .tari.rpc.TransactionOutput outputs = 2;
    {
      total_size += 1UL * this_._internal_outputs_size();
      for (const auto& msg : this_._internal_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .tari.rpc.TransactionKernel kernels = 3;
    {
      total_size += 1UL * this_._internal_kernels_size();
      for (const auto& msg : this_._internal_kernels()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AggregateBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggregateBody*>(&to_msg);
  auto& from = static_cast<const AggregateBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.AggregateBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_inputs()->MergeFrom(
      from._internal_inputs());
  _this->_internal_mutable_outputs()->MergeFrom(
      from._internal_outputs());
  _this->_internal_mutable_kernels()->MergeFrom(
      from._internal_kernels());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateBody::CopyFrom(const AggregateBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.AggregateBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggregateBody::InternalSwap(AggregateBody* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  _impl_.outputs_.InternalSwap(&other->_impl_.outputs_);
  _impl_.kernels_.InternalSwap(&other->_impl_.kernels_);
}

::google::protobuf::Metadata AggregateBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Transaction::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Transaction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transaction, _impl_._has_bits_);
};

Transaction::Transaction(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Transaction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Transaction)
}
PROTOBUF_NDEBUG_INLINE Transaction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::Transaction& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        offset_(arena, from.offset_),
        script_offset_(arena, from.script_offset_) {}

Transaction::Transaction(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Transaction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Transaction_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transaction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.body_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.body_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:tari.rpc.Transaction)
}
PROTOBUF_NDEBUG_INLINE Transaction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        offset_(arena),
        script_offset_(arena) {}

inline void Transaction::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.body_ = {};
}
Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:tari.rpc.Transaction)
  SharedDtor(*this);
}
inline void Transaction::SharedDtor(MessageLite& self) {
  Transaction& this_ = static_cast<Transaction&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.offset_.Destroy();
  this_._impl_.script_offset_.Destroy();
  delete this_._impl_.body_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Transaction::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Transaction(arena);
}
constexpr auto Transaction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Transaction),
                                            alignof(Transaction));
}
constexpr auto Transaction::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Transaction_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Transaction::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Transaction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Transaction::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Transaction>(), &Transaction::ByteSizeLong,
              &Transaction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Transaction, _impl_._cached_size_),
          false,
      },
      &Transaction::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Transaction_class_data_ =
        Transaction::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Transaction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Transaction_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Transaction_class_data_.tc_table);
  return Transaction_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
Transaction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transaction, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Transaction_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::Transaction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes offset = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.offset_)}},
    // .tari.rpc.AggregateBody body = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.body_)}},
    // bytes script_offset = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.script_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes offset = 1;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.offset_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.AggregateBody body = 2;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.body_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes script_offset = 3;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.script_offset_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::AggregateBody>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Transaction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.offset_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.script_offset_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.body_ != nullptr);
      _impl_.body_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Transaction::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Transaction& this_ = static_cast<const Transaction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Transaction::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Transaction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Transaction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes offset = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_offset().empty()) {
      const ::std::string& _s = this_._internal_offset();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.AggregateBody body = 2;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.body_, this_._impl_.body_->GetCachedSize(), target,
        stream);
  }

  // bytes script_offset = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_script_offset().empty()) {
      const ::std::string& _s = this_._internal_script_offset();
      target = stream->WriteBytesMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Transaction)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Transaction::ByteSizeLong(const MessageLite& base) {
  const Transaction& this_ = static_cast<const Transaction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Transaction::ByteSizeLong() const {
  const Transaction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.Transaction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // bytes offset = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_offset().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_offset());
      }
    }
    // bytes script_offset = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_script_offset().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_script_offset());
      }
    }
    // .tari.rpc.AggregateBody body = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.body_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Transaction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transaction*>(&to_msg);
  auto& from = static_cast<const Transaction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Transaction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_offset().empty()) {
        _this->_internal_set_offset(from._internal_offset());
      } else {
        if (_this->_impl_.offset_.IsDefault()) {
          _this->_internal_set_offset("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_script_offset().empty()) {
        _this->_internal_set_script_offset(from._internal_script_offset());
      } else {
        if (_this->_impl_.script_offset_.IsDefault()) {
          _this->_internal_set_script_offset("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.body_ != nullptr);
      if (_this->_impl_.body_ == nullptr) {
        _this->_impl_.body_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.body_);
      } else {
        _this->_impl_.body_->MergeFrom(*from._impl_.body_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transaction::InternalSwap(Transaction* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.offset_, &other->_impl_.offset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_offset_, &other->_impl_.script_offset_, arena);
  swap(_impl_.body_, other->_impl_.body_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UnblindedOutput::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<UnblindedOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._has_bits_);
};

void UnblindedOutput::clear_metadata_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void UnblindedOutput::clear_range_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.range_proof_ != nullptr) _impl_.range_proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
UnblindedOutput::UnblindedOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UnblindedOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.UnblindedOutput)
}
PROTOBUF_NDEBUG_INLINE UnblindedOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::tari::rpc::UnblindedOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        spending_key_(arena, from.spending_key_),
        script_(arena, from.script_),
        input_data_(arena, from.input_data_),
        script_private_key_(arena, from.script_private_key_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_) {}

UnblindedOutput::UnblindedOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UnblindedOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UnblindedOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UnblindedOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_)
                : nullptr;
  _impl_.metadata_signature_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_)
                : nullptr;
  _impl_.range_proof_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.range_proof_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, value_),
           offsetof(Impl_, minimum_value_promise_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::minimum_value_promise_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.UnblindedOutput)
}
PROTOBUF_NDEBUG_INLINE UnblindedOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        spending_key_(arena),
        script_(arena),
        input_data_(arena),
        script_private_key_(arena),
        sender_offset_public_key_(arena),
        covenant_(arena),
        encrypted_data_(arena) {}

inline void UnblindedOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, minimum_value_promise_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::minimum_value_promise_));
}
UnblindedOutput::~UnblindedOutput() {
  // @@protoc_insertion_point(destructor:tari.rpc.UnblindedOutput)
  SharedDtor(*this);
}
inline void UnblindedOutput::SharedDtor(MessageLite& self) {
  UnblindedOutput& this_ = static_cast<UnblindedOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.spending_key_.Destroy();
  this_._impl_.script_.Destroy();
  this_._impl_.input_data_.Destroy();
  this_._impl_.script_private_key_.Destroy();
  this_._impl_.sender_offset_public_key_.Destroy();
  this_._impl_.covenant_.Destroy();
  this_._impl_.encrypted_data_.Destroy();
  delete this_._impl_.features_;
  delete this_._impl_.metadata_signature_;
  delete this_._impl_.range_proof_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UnblindedOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UnblindedOutput(arena);
}
constexpr auto UnblindedOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UnblindedOutput),
                                            alignof(UnblindedOutput));
}
constexpr auto UnblindedOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UnblindedOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UnblindedOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UnblindedOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UnblindedOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UnblindedOutput>(), &UnblindedOutput::ByteSizeLong,
              &UnblindedOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._cached_size_),
          false,
      },
      &UnblindedOutput::kDescriptorMethods,
      &descriptor_table_transaction_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull UnblindedOutput_class_data_ =
        UnblindedOutput::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
UnblindedOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UnblindedOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UnblindedOutput_class_data_.tc_table);
  return UnblindedOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 3, 0, 2>
UnblindedOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950944,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    UnblindedOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::UnblindedOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.value_), 10>(),
     {8, 10, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.value_)}},
    // bytes spending_key = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.spending_key_)}},
    // .tari.rpc.OutputFeatures features = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 7, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_)}},
    // bytes script = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_)}},
    // bytes input_data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.input_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes script_private_key = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_private_key_)}},
    // bytes sender_offset_public_key = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.sender_offset_public_key_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 8, 1, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.metadata_signature_)}},
    // uint64 script_lock_height = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.script_lock_height_), 11>(),
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_lock_height_)}},
    // bytes covenant = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 5, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.covenant_)}},
    // bytes encrypted_data = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 6, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.minimum_value_promise_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_)}},
    // .tari.rpc.RangeProof range_proof = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 9, 2, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.range_proof_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 value = 1;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.value_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes spending_key = 2;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.spending_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.OutputFeatures features = 3;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes script = 4;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes input_data = 5;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.input_data_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script_private_key = 7;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_private_key_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sender_offset_public_key = 8;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.sender_offset_public_key_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 8, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 script_lock_height = 10;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_lock_height_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes covenant = 11;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.covenant_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes encrypted_data = 12;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.encrypted_data_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 13;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // .tari.rpc.RangeProof range_proof = 14;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.range_proof_), _Internal::kHasBitsOffset + 9, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
      {::_pbi::TcParser::GetTable<::tari::rpc::RangeProof>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void UnblindedOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.UnblindedOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.spending_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.script_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.input_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.script_private_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.sender_offset_public_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.covenant_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.encrypted_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.range_proof_ != nullptr);
      _impl_.range_proof_->Clear();
    }
  }
  if ((cached_has_bits & 0x00001c00u) != 0) {
    ::memset(&_impl_.value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.minimum_value_promise_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.minimum_value_promise_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UnblindedOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UnblindedOutput& this_ = static_cast<const UnblindedOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UnblindedOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UnblindedOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.UnblindedOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 value = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_value() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          1, this_._internal_value(), target);
    }
  }

  // bytes spending_key = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_spending_key().empty()) {
      const ::std::string& _s = this_._internal_spending_key();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 3;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.features_, this_._impl_.features_->GetCachedSize(), target,
        stream);
  }

  // bytes script = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_script().empty()) {
      const ::std::string& _s = this_._internal_script();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
    }
  }

  // bytes input_data = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_input_data().empty()) {
      const ::std::string& _s = this_._internal_input_data();
      target = stream->WriteBytesMaybeAliased(5, _s, target);
    }
  }

  // bytes script_private_key = 7;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (!this_._internal_script_private_key().empty()) {
      const ::std::string& _s = this_._internal_script_private_key();
      target = stream->WriteBytesMaybeAliased(7, _s, target);
    }
  }

  // bytes sender_offset_public_key = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_sender_offset_public_key().empty()) {
      const ::std::string& _s = this_._internal_sender_offset_public_key();
      target = stream->WriteBytesMaybeAliased(8, _s, target);
    }
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.metadata_signature_, this_._impl_.metadata_signature_->GetCachedSize(), target,
        stream);
  }

  // uint64 script_lock_height = 10;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (this_._internal_script_lock_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          10, this_._internal_script_lock_height(), target);
    }
  }

  // bytes covenant = 11;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_covenant().empty()) {
      const ::std::string& _s = this_._internal_covenant();
      target = stream->WriteBytesMaybeAliased(11, _s, target);
    }
  }

  // bytes encrypted_data = 12;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (!this_._internal_encrypted_data().empty()) {
      const ::std::string& _s = this_._internal_encrypted_data();
      target = stream->WriteBytesMaybeAliased(12, _s, target);
    }
  }

  // uint64 minimum_value_promise = 13;
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_minimum_value_promise() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          13, this_._internal_minimum_value_promise(), target);
    }
  }

  // .tari.rpc.RangeProof range_proof = 14;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.range_proof_, this_._impl_.range_proof_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.UnblindedOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UnblindedOutput::ByteSizeLong(const MessageLite& base) {
  const UnblindedOutput& this_ = static_cast<const UnblindedOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UnblindedOutput::ByteSizeLong() const {
  const UnblindedOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:tari.rpc.UnblindedOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // bytes spending_key = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_spending_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_spending_key());
      }
    }
    // bytes script = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_script().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_script());
      }
    }
    // bytes input_data = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_input_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_input_data());
      }
    }
    // bytes script_private_key = 7;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_script_private_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_script_private_key());
      }
    }
    // bytes sender_offset_public_key = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_sender_offset_public_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_sender_offset_public_key());
      }
    }
    // bytes covenant = 11;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_covenant().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_covenant());
      }
    }
    // bytes encrypted_data = 12;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_encrypted_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_encrypted_data());
      }
    }
    // .tari.rpc.OutputFeatures features = 3;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.features_);
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_signature_);
    }
    // .tari.rpc.RangeProof range_proof = 14;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.range_proof_);
    }
    // uint64 value = 1;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_value() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_value());
      }
    }
    // uint64 script_lock_height = 10;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_script_lock_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_script_lock_height());
      }
    }
    // uint64 minimum_value_promise = 13;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_minimum_value_promise() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_minimum_value_promise());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UnblindedOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UnblindedOutput*>(&to_msg);
  auto& from = static_cast<const UnblindedOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.UnblindedOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_spending_key().empty()) {
        _this->_internal_set_spending_key(from._internal_spending_key());
      } else {
        if (_this->_impl_.spending_key_.IsDefault()) {
          _this->_internal_set_spending_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_script().empty()) {
        _this->_internal_set_script(from._internal_script());
      } else {
        if (_this->_impl_.script_.IsDefault()) {
          _this->_internal_set_script("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_input_data().empty()) {
        _this->_internal_set_input_data(from._internal_input_data());
      } else {
        if (_this->_impl_.input_data_.IsDefault()) {
          _this->_internal_set_input_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_script_private_key().empty()) {
        _this->_internal_set_script_private_key(from._internal_script_private_key());
      } else {
        if (_this->_impl_.script_private_key_.IsDefault()) {
          _this->_internal_set_script_private_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_sender_offset_public_key().empty()) {
        _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
      } else {
        if (_this->_impl_.sender_offset_public_key_.IsDefault()) {
          _this->_internal_set_sender_offset_public_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_covenant().empty()) {
        _this->_internal_set_covenant(from._internal_covenant());
      } else {
        if (_this->_impl_.covenant_.IsDefault()) {
          _this->_internal_set_covenant("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_encrypted_data().empty()) {
        _this->_internal_set_encrypted_data(from._internal_encrypted_data());
      } else {
        if (_this->_impl_.encrypted_data_.IsDefault()) {
          _this->_internal_set_encrypted_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.range_proof_ != nullptr);
      if (_this->_impl_.range_proof_ == nullptr) {
        _this->_impl_.range_proof_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.range_proof_);
      } else {
        _this->_impl_.range_proof_->MergeFrom(*from._impl_.range_proof_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_value() != 0) {
        _this->_impl_.value_ = from._impl_.value_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_script_lock_height() != 0) {
        _this->_impl_.script_lock_height_ = from._impl_.script_lock_height_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_minimum_value_promise() != 0) {
        _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnblindedOutput::CopyFrom(const UnblindedOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.UnblindedOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UnblindedOutput::InternalSwap(UnblindedOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.spending_key_, &other->_impl_.spending_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_data_, &other->_impl_.input_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_private_key_, &other->_impl_.script_private_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_)
      + sizeof(UnblindedOutput::_impl_.minimum_value_promise_)
      - PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata UnblindedOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tari
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_transaction_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
